{"version":3,"sources":["stores/UserStore.ts","stores/SimulationsStore.ts","models/DeviceType.model.ts","stores/NewSimulationStore.ts","stores/RootStore.ts","components/dropdown/Dropdown.tsx","components/Navbar.tsx","components/Footer.tsx","utils/ClassNames.ts","components/Input.tsx","services/TranslationService.ts","assets/translations/en.ts","pages/login/Login.tsx","pages/register/Register.tsx","components/simulation-list-element/SimulationListElement.tsx","pages/simulationslist/SimulationsList.tsx","pages/change_password/ChangePassword.tsx","components/SimulationBottomBar.tsx","components/tooltip/Tooltip.tsx","components/DeviceTypeListElement.tsx","components/icon-picker/IconPicker.tsx","components/select/Select.tsx","pages/simulation/DevicesTypes.tsx","components/number-input/NumberInput.tsx","components/checkbox/Checkbox.tsx","components/MediumListElement.tsx","pages/simulation/MediumChannels.tsx","components/topology-diagram/TryItemWidget.tsx","components/topology-diagram/DemoCanvasWidget.tsx","components/topology-diagram/CustomLinkModel.tsx","components/topology-diagram/node-widget/NodeModel.tsx","components/topology-diagram/BodyWidget.tsx","components/topology-diagram/node-widget/NodeWidget.tsx","components/topology-diagram/node-widget/NodeFactory.tsx","pages/simulation/Topology.tsx","components/topology-diagram/TopologyDiagram.tsx","components/VersionListElement.tsx","components/process/Process.tsx","pages/simulation/Versions.tsx","pages/simulation/Start.tsx","components/modal/Modal.tsx","models/SimulationTemplate.model.ts","models/templates/Simulation1.ts","models/templates/Simulation2.ts","models/templates/Simulation3.ts","components/simulation-template-modal/SimulationTemplateModal.tsx","pages/simulation/SimulationMain.tsx","pages/simulation-details/SimulationDetails.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["UserStore","rootStore","this","observable","localStorage","getItem","action","registeredPrompt","data","callback","a","loginError","fetchingLogging","fetch","method","headers","Accept","body","JSON","stringify","rawResponse","json","content","success","setItem","token","onError","registrationError","fetchingRegistration","onInvalidOldPassword","changePasswordError","fetchingPasswordChanging","Authorization","status","userStore","logout","setTimeout","window","location","reload","message","clear","SimulationsStore","loadingSimulations","link","currentSimulationsPage","console","log","simulations","simulationsCount","count","value","Icons","icon","IoIosDesktop","name","IoIosTabletPortrait","IoIosRadio","IoIosLaptop","IoIosCalculator","IoIosCube","CPUs","label","OSes","Libraries","checkDeviceTypeNameUniqueness","id","deviceTypes","findIndex","v","activeDeviceType","checkMediumNameUniqueness","mediums","activeMedium","checkChannelNameUniqueness","currentChannelId","state","forEach","channels","index","checkVersionNameUniqueness","versions","activeVersion","checkProcessNameUniqueness","currentProcessId","processes","topologyElements","medium","channel","push","undefined","length","cpu","os","libraries","schedulingAlgorithm","device","splice","defaultQuality","defaultListeningCurrent","defaultSendingCurrent","defaultReceivingCurrent","mediumId","buffer","computed","tmp","version","versionId","time","process","elements","toJS","topology","RootStore","simulationsStore","newSimulationStore","resetNewSimulationStore","NewSimulationStore","setSimulationModel","simulation","setDeviceTypes","parse","setMediums","setTopologyElements","setVersions","Dropdown","inject","observer","displayMenu","redirectToReferrer","showDropdownMenu","event","preventDefault","setState","document","addEventListener","hideDropdownMenu","removeEventListener","props","store","to","className","onClick","React","Component","Navbar","classNames","classes","Object","entries","filter","map","key","join","regexes","email","regex","alert","password","elementName","Input","validate","type","test","errorText","error","setValidity","getValue","setValue","handleChange","target","initialValue","input","white","onChange","TranslationService","change_password","old_password","new_password","confirm_new_password","passwords_not_the_same","log_into","invalid_cridentials","email_address","not_have_accout","sign_up","log_in","registered","confirm_password","sign_in","have_account","email_used","my_simulations","create_simulation","time_in_s","go_back","simulation_details","date","details","simulation_not_found","device_types","device_types_tooltip","add_device_types","device_details","save","primary","device_icon","device_name","scheduling_algorithm","informational","no_device_added_header","no_device_added_description","mediums_tooltip","add_medium","medium_details","medium_name","constants","default_quality","default_listening_current","default_sending_current","default_recieving_current","channels_tooltip","add_channel","channel_name","buffer_name","is_infinity","no_medium_added_header","no_medium_added_description","confirm","go_back_are_you_shure","cancel","accept","warning","problems_in_form","ok","add_element_in_page","start_simulation","start_simulation_description","starting","something_error","try_again","version_name","unique_name","versions_and_proccesses","versions_and_proccesses_tooltip","add_version","version_details","add_process","no_version_added_header","no_version_added_description","process_name","device_instance","execution_time","infinity_process","process_with_recieve","recieve_from_channel","process_with_send","send_channel","device_to_sent","size_to_sent","select_option","running","pending","in","out","topology_tooltip","available_devices","drag_and_drop","redo_stop","next_step","device_icon_tooltip","device_name_tooltip","device_scheduling_tooltip","device_informal_tooltip","medium_name_tooltip","medium_constants_tooltip","channel_name_tooltip","channel_buffer_tooltip","version_name_tooltip","process_name_tooltip","process_device_instance_tooltip","process_execution_time_tooltip","process_infinity_tooltip","process_recieve_tooltip","process_send_tooltip","LoginPage","emailInputRef","createRef","passwordInputRef","navigateAfterLogin","history","login","emailInput","current","passwordInput","emailValidation","passwordValidation","onSubmit","ref","withRouter","RegisterPage","confirmPasswordInputRef","navigateAfterRegister","register","confirmPasswordInput","confirmPasswordValidation","confirmPassword","onErrorCallback","SimulationListElement","renderStatusInfo","color","height","width","moment","createdAt","format","SimulationsListPage","componentDidMount","getSimulationsList","onChangePage","selected","changeSimulationPage","pageCount","Math","ceil","pageRangeDisplayed","marginPagesDisplayed","containerClassName","pageLinkClassName","previousLinkClassName","nextLinkClassName","previousLabel","nextLabel","activeLinkClassName","onPageChange","ChangePasswordPage","oldPasswordInputRef","newPasswordInputRef","confirmNewPasswordInputRef","navigateAfterAction","onInvaildOldPassword","oldPasswordInput","changePassword","confirmNewPasswordInput","ListElements","position","Icon","IoIosWifi","IoIosGitNetwork","IoIosList","IoIosPlay","SimulationBottomBar","changePosition","element","style","marginLeft","marginRight","TooltipComponent","placement","trigger","overlay","title","DeviceTypeListElement","active","onPress","find","IconPicker","Element","Select","items","f","options","placeholder","ScheduleTypes","DevicesTypes","iconPickerRef","nameInputRef","cpuSelectRef","osSelectRef","libsSelectRef","schedulingAlgorithmSelectRef","setDataToForm","cpuInputRef","osInputRef","librariesInputRef","saveData","editDeviceType","changeActiveDeviceType","updatedDevice","changeDevice","addDevice","addDeviceType","removeDeviceType","NumberInput","toggleDisabled","disabled","step","Checkbox","checkbox","MediumListElement","MediumChannels","inputRef","bufferRef","checkboxRef","refDefQuality","refDefListCurrent","refDefSenCurrent","refDefRecCurrent","editMedium","changeActiveMedium","channelsValidity","nameRef","isInfinityBuffer","updatedMedium","changeMedium","addMedium","addChannel","addChannelToMedium","removeMedium","removeChannelFromMedium","TrayItemWidget","model","deviceType","draggable","onDragStart","dataTransfer","setData","Container","styled","div","DemoCanvasWidget","background","children","AdvancedPortModel","channelName","canLinkToPort","port","getOptions","locked","DefaultPortModel","CustomNodeModel","deviceId","deviceCounter","addPort","serialize","NodeModel","BodyWidget","listOfAllChannels","deviceIndexInList","onDrop","getData","node","point","app","getDiagramEngine","getRelativeMousePoint","setPosition","getModel","addNode","forceUpdate","onDragOver","engine","NodeWidget","getPorts","Ports","InPorts","OutPorts","keys","includes","removeNode","remove","channelsNames","NodeFactory","initialConfig","AbstractReactFactory","createEngine","newModel","DiagramModel","setModel","serializeDiagram","getNodeLayers","deserializeDiagram","serializedModel","deserializeModel","prepareDiagramToAnalyse","serializedDiagram","models","getModels","links","getParent","getLayers","preparedDiagram","connectedOutDevicesIds","sourcePort","getSourcePort","split","targetPort","getTargetPort","sourceNode","parseInt","getActiveDiagram","getNodeFactories","registerFactory","Topology","defaultModel","setNewModel","changeTopologyElements","topologyDiagrams","resetApp","VersionListElement","Process","deviceInstanceSelectRef","executionTimeInputRef","processTypeSelectRef","inChannelSelectRef","outChannelSelectRef","senderDeviceSelectRef","outMessageSizeRef","infinityCheckboxRef","isOutProcessCheckboxRef","isInProcessCheckboxRef","validation","deviceToSendId","inChannel","outChannel","isInfinity","outMessageSize","isInProcess","isOutProcess","onChangeInChannelVisibility","onChangeOutChannelVisibility","getChannelsList","w","onChangeChannel","sendDevices","sendDevicesList","_","uniq","toString","channelsList","removeProcess","devicesInstances","Versions","processesRefs","editVersion","changeActiveVersion","updatedVersion","changeVersion","addVersion","addVersionFunc","addProcessToVersion","removeProcessFromVersion","removeVersion","Start","simulationStarted","simulationCompleted","simulationError","startSimulation","getAllModels","parsed","simulationId","Modal","header","text","onPressLeft","leftButtonLabel","rightButtonLabel","onPressRight","SimulationTemplatesList","description","SimulationTemplateModal","emptySimulationPressed","item","templateSimulationPressed","SimulationPage","deviceTypesRef","mediumsChannelsRef","topologyRef","versionsRef","mainPosition","showTemplateModal","loading","showModal","modalContent","onLeftClick","onRightClick","closeTemplateModal","setSimulation","defaultSimulation","checkFormValidation","isArrayEmpty","previousCallback","resetDeviceTypes","nextCallback","resetMediums","resetTopology","resetVersions","num","StatusDictionary","SimulationDetails","getSimulation","match","params","renderRaport","results","trim","slice","rest","goToSimulationsList","Store","PrivateRoute","component","render","App","path","SimulationsList","ChangePassword","Simulation","Footer","Boolean","hostname","ReactDOM","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.883c592d.chunk.js","sourcesContent":["import { observable, action } from 'mobx';\r\nimport { RootStore } from './RootStore';\r\n\r\nclass UserStore {\r\n  rootStore: RootStore;\r\n\r\n  @observable\r\n  token = localStorage.getItem('token') || '';\r\n\r\n  @observable\r\n  registeredPrompt = false;\r\n\r\n  @observable\r\n  fetchingRegistration = false;\r\n\r\n  @observable\r\n  fetchingLogging = false;\r\n\r\n  @observable\r\n  fetchingPasswordChanging = false;\r\n\r\n  @observable\r\n  loginError = false;\r\n\r\n  @observable\r\n  registrationError = false;\r\n\r\n  @observable\r\n  changePasswordError = false;\r\n\r\n  @observable\r\n  invalidOldUserPasswordError = false;\r\n\r\n  @observable\r\n  userId: number = 0;\r\n\r\n  constructor(rootStore: any) {\r\n    this.rootStore = rootStore;\r\n  }\r\n\r\n  @action\r\n  hideRegisteredPrompt = () => {\r\n    this.registeredPrompt = false;\r\n  };\r\n\r\n  @action\r\n  login = async (data: Object, callback?: () => void) => {\r\n    this.loginError = false;\r\n    this.fetchingLogging = true;\r\n    this.registeredPrompt = false;\r\n\r\n    try {\r\n      const rawResponse = await fetch('/api/login', {\r\n        method: 'POST',\r\n        headers: {\r\n          Accept: 'application/json',\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(data),\r\n      });\r\n      const content = await rawResponse.json();\r\n\r\n      if (content.success) {\r\n        this.fetchingLogging = false;\r\n        this.loginError = false;\r\n        localStorage.setItem('token', content.token);\r\n        this.token = content.token;\r\n        callback && callback();\r\n      } else {\r\n        this.loginError = true;\r\n        this.fetchingLogging = false;\r\n      }\r\n    } catch (error) {\r\n      // console.log(error);\r\n      this.loginError = true;\r\n      this.fetchingLogging = false;\r\n    }\r\n  };\r\n\r\n  @action\r\n  register = async (\r\n    data: Object,\r\n    callback?: () => void,\r\n    onError?: (error: any) => void\r\n  ) => {\r\n    this.registrationError = false;\r\n    this.fetchingRegistration = true;\r\n\r\n    try {\r\n      const rawResponse = await fetch('/api/signup', {\r\n        method: 'POST',\r\n        headers: {\r\n          Accept: 'application/json',\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(data),\r\n      });\r\n      const content = await rawResponse.json();\r\n\r\n      if (content.success) {\r\n        this.fetchingRegistration = false;\r\n        this.registrationError = false;\r\n        this.registeredPrompt = true;\r\n        callback && callback();\r\n      } else {\r\n        throw content;\r\n      }\r\n    } catch (error) {\r\n      onError && onError(error);\r\n      this.registrationError = true;\r\n      this.fetchingRegistration = false;\r\n    }\r\n  };\r\n\r\n  @action\r\n  changePassword = async (\r\n    data: Object,\r\n    callback?: () => void,\r\n    onInvalidOldPassword?: () => void\r\n  ) => {\r\n    this.changePasswordError = false;\r\n    this.fetchingPasswordChanging = true;\r\n\r\n    try {\r\n      const rawResponse = await fetch('/api/change_password', {\r\n        method: 'POST',\r\n        headers: {\r\n          Accept: 'application/json',\r\n          'Content-Type': 'application/json',\r\n          Authorization: 'Bearer ' + localStorage.getItem('token'),\r\n        },\r\n        body: JSON.stringify(data),\r\n      });\r\n\r\n      if (rawResponse.status === 401) {\r\n        this.rootStore.userStore.logout();\r\n        setTimeout(() => {\r\n          window.location.reload();\r\n        }, 100);\r\n        return;\r\n      }\r\n\r\n      const content = await rawResponse.json();\r\n\r\n      if (content.success) {\r\n        this.fetchingPasswordChanging = false;\r\n        this.changePasswordError = false;\r\n        callback && callback();\r\n      } else {\r\n        if (content.message === 'Incorrect user password.') {\r\n          onInvalidOldPassword && onInvalidOldPassword();\r\n        } else {\r\n          this.changePasswordError = true;\r\n        }\r\n        this.fetchingPasswordChanging = false;\r\n      }\r\n    } catch (error) {\r\n      // console.log(error);\r\n      this.changePasswordError = true;\r\n      this.fetchingPasswordChanging = false;\r\n    }\r\n  };\r\n\r\n  @action\r\n  logout = (callback?: () => void) => {\r\n    callback && callback();\r\n\r\n    setTimeout(() => {\r\n      localStorage.clear();\r\n      this.token = '';\r\n    }, 100);\r\n  };\r\n}\r\n\r\nexport default UserStore;\r\n","import { observable, action } from 'mobx';\r\nimport { RootStore } from './RootStore';\r\nimport { SimulationListElement } from '../models/SimulationListElement.model';\r\n\r\nclass SimulationsStore {\r\n  rootStore: RootStore;\r\n\r\n  @observable simulations: SimulationListElement[] = [];\r\n  @observable loadingSimulations: boolean = false;\r\n  @observable simulationsCount: number = 0;\r\n  @observable currentSimulationsPage: number = 0;\r\n\r\n  constructor(rootStore: any) {\r\n    this.rootStore = rootStore;\r\n  }\r\n\r\n  @action\r\n  getSimulationsList = async () => {\r\n    this.loadingSimulations = true;\r\n\r\n    try {\r\n      const link = '/api/simulations?page=' + this.currentSimulationsPage;\r\n      const rawResponse = await fetch(link, {\r\n        method: 'GET',\r\n        headers: {\r\n          Accept: 'application/json',\r\n          'Content-Type': 'application/json',\r\n          Authorization: 'Bearer ' + localStorage.getItem('token'),\r\n        },\r\n      });\r\n\r\n      if (rawResponse.status === 401) {\r\n        this.rootStore.userStore.logout();\r\n        setTimeout(() => {\r\n          window.location.reload();\r\n        }, 100);\r\n\r\n        return;\r\n      }\r\n\r\n      console.log(rawResponse);\r\n\r\n      const content = await rawResponse.json();\r\n\r\n      if (content.success) {\r\n        this.loadingSimulations = false;\r\n        this.simulations = content.data;\r\n        this.simulationsCount = content.count;\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n      this.loadingSimulations = false;\r\n    }\r\n  };\r\n\r\n  @action\r\n  changeSimulationPage = (value: number) => {\r\n    this.currentSimulationsPage = value;\r\n  };\r\n}\r\n\r\nexport default SimulationsStore;\r\n","import {\r\n  IoIosDesktop,\r\n  IoIosTabletPortrait,\r\n  IoIosRadio,\r\n  IoIosLaptop,\r\n  IoIosCalculator,\r\n  IoIosCube,\r\n} from 'react-icons/io';\r\n\r\nexport interface DeviceType {\r\n  name: string;\r\n  icon: string;\r\n  cpu: string;\r\n  os: string;\r\n  libraries: string;\r\n  schedulingAlgorithm: 'fifo' | 'rr';\r\n}\r\n\r\nexport const Icons = [\r\n  {\r\n    icon: IoIosDesktop,\r\n    name: 'IoIosDesktop',\r\n  },\r\n  {\r\n    icon: IoIosTabletPortrait,\r\n    name: 'IoIosTabletPortrait',\r\n  },\r\n  {\r\n    icon: IoIosRadio,\r\n    name: 'IoIosRadio',\r\n  },\r\n  {\r\n    icon: IoIosLaptop,\r\n    name: 'IoIosLaptop',\r\n  },\r\n  {\r\n    icon: IoIosCalculator,\r\n    name: 'IoIosCalculator',\r\n  },\r\n  {\r\n    icon: IoIosCube,\r\n    name: 'IoIosCube',\r\n  },\r\n];\r\n\r\nexport const CPUs = [\r\n  {\r\n    value: 0,\r\n    label: 'N/A',\r\n  },\r\n  {\r\n    value: 1,\r\n    label: '16-bit 8MHz TI MSP430',\r\n  },\r\n  {\r\n    value: 2,\r\n    label: '12 x Intel Core i7-3930K 3.20GHz',\r\n  },\r\n  {\r\n    value: 3,\r\n    label: '6 x Intel Core i7-3930K 3.20GHz',\r\n  },\r\n  {\r\n    value: 4,\r\n    label: 'Intel Core 2 Duo E6405 2.13GHz',\r\n  },\r\n  {\r\n    value: 5,\r\n    label: 'Pentium Dual-Core T4200 2GHz',\r\n  },\r\n  {\r\n    value: 6,\r\n    label: 'Intel Xeon Gold 6142 2.6GHz',\r\n  },\r\n  {\r\n    value: 7,\r\n    label: '4 x Intel Xeon Gold 6142 2.6GHz',\r\n  },\r\n  {\r\n    value: 8,\r\n    label: 'Intel Atom P5942B 2.50GHz',\r\n  },\r\n  {\r\n    value: 8,\r\n    label: 'Intel Celeron G5900T 3.2GHz',\r\n  },\r\n];\r\n\r\nexport const OSes = [\r\n  {\r\n    value: 0,\r\n    label: 'N/A',\r\n  },\r\n  {\r\n    value: 1,\r\n    label: 'Debian 7.1 64-bit',\r\n  },\r\n  {\r\n    value: 2,\r\n    label: 'Debian 8 64-bit',\r\n  },\r\n  {\r\n    value: 3,\r\n    label: 'Ubuntu 20.04 64-bit',\r\n  },\r\n  {\r\n    value: 4,\r\n    label: 'Windows 10 Pro 64-bit',\r\n  },\r\n  {\r\n    value: 5,\r\n    label: 'Windows 8 Pro 64-bit',\r\n  },\r\n  {\r\n    value: 6,\r\n    label: 'Windows 7 Ultimate 64-bit',\r\n  },\r\n  {\r\n    value: 7,\r\n    label: 'Linux Mint 20 64-bit',\r\n  },\r\n  {\r\n    value: 8,\r\n    label: 'Fedora 32 64-bit',\r\n  },\r\n  {\r\n    value: 9,\r\n    label: 'Red Hat Enterprise Linux 8 64-bit',\r\n  },\r\n];\r\n\r\nexport const Libraries = [\r\n  {\r\n    value: 0,\r\n    label: 'N/A',\r\n  },\r\n  {\r\n    value: 1,\r\n    label: 'openssl 1.0.1c',\r\n  },\r\n  {\r\n    value: 2,\r\n    label: 'openssl 1.1.0',\r\n  },\r\n  {\r\n    value: 3,\r\n    label: 'openssl 1.1.1',\r\n  },\r\n  {\r\n    value: 4,\r\n    label: 'wolfCrypt 4.5.0',\r\n  },\r\n  {\r\n    value: 5,\r\n    label: 'Nettle 3.5.1',\r\n  },\r\n  {\r\n    value: 6,\r\n    label: 'Crypto++ 3.4.5',\r\n  },\r\n  {\r\n    value: 7,\r\n    label: 'mbed TLS 2.16.2',\r\n  },\r\n];\r\n","import { observable, action, computed, toJS } from 'mobx';\r\nimport { RootStore } from './RootStore';\r\nimport {\r\n  DeviceType as DeviceTypeModel,\r\n  CPUs,\r\n  OSes,\r\n  Libraries,\r\n} from '../models/DeviceType.model';\r\nimport {\r\n  Medium as MediumModel,\r\n  Channel as ChannelModel,\r\n} from '../models/Medium.model';\r\nimport { Version, Process } from '../models/Version.model';\r\nimport { TopologyElement } from '../models/TopologyElement.model';\r\n\r\nclass SimulationsStore {\r\n  rootStore: RootStore;\r\n\r\n  @observable\r\n  activeDeviceType?: number;\r\n\r\n  @observable\r\n  activeMedium?: number;\r\n\r\n  @observable\r\n  activeVersion?: number;\r\n\r\n  @observable\r\n  deviceTypes: DeviceTypeModel[];\r\n\r\n  @observable\r\n  mediums: MediumModel[];\r\n\r\n  @observable\r\n  versions: Version[];\r\n\r\n  @observable\r\n  topologyElements: TopologyElement[];\r\n\r\n  constructor(rootStore: any) {\r\n    this.rootStore = rootStore;\r\n    this.deviceTypes = [];\r\n    this.mediums = [];\r\n    this.versions = [];\r\n    this.topologyElements = [];\r\n  }\r\n\r\n  @action setDeviceTypes = (deviceTypes: DeviceTypeModel[]) => {\r\n    this.deviceTypes = deviceTypes;\r\n  };\r\n\r\n  @action setMediums = (mediums: MediumModel[]) => {\r\n    this.mediums = mediums;\r\n  };\r\n\r\n  @action setVersions = (versions: Version[]) => {\r\n    this.versions = versions;\r\n  };\r\n\r\n  @action setTopologyElements = (topologyElements: TopologyElement[]) => {\r\n    this.topologyElements = topologyElements;\r\n  };\r\n\r\n  @action\r\n  resetDeviceTypes = () => {\r\n    this.deviceTypes = [];\r\n    this.activeDeviceType = undefined;\r\n  };\r\n\r\n  @action\r\n  resetMediums = () => {\r\n    this.mediums = [];\r\n    this.activeMedium = undefined;\r\n  };\r\n\r\n  @action\r\n  resetTopology = () => {\r\n    this.topologyElements = [];\r\n  };\r\n\r\n  @action\r\n  resetVersions = () => {\r\n    this.versions = [];\r\n    this.activeVersion = undefined;\r\n  };\r\n\r\n  @action\r\n  addDeviceType = () => {\r\n    this.deviceTypes.push({\r\n      name: 'DeviceType' + (this.deviceTypes.length + 1),\r\n      icon: 'IoIosDesktop',\r\n      cpu: CPUs[0].label,\r\n      os: OSes[0].label,\r\n      libraries: Libraries[0].label,\r\n      schedulingAlgorithm: 'fifo',\r\n    });\r\n    this.activeDeviceType = this.deviceTypes.length - 1;\r\n  };\r\n\r\n  @action\r\n  editDeviceType = (device: DeviceTypeModel, id: number) => {\r\n    this.deviceTypes[id] = device;\r\n    this.activeDeviceType = undefined;\r\n  };\r\n\r\n  @action\r\n  removeDeviceType = (id: number | undefined) => {\r\n    if (id !== undefined) {\r\n      this.deviceTypes.splice(id, 1);\r\n      this.activeDeviceType = undefined;\r\n    }\r\n  };\r\n\r\n  @action\r\n  changeActiveDeviceType = (id: number | undefined) => {\r\n    this.activeDeviceType = this.activeDeviceType === id ? undefined : id;\r\n  };\r\n\r\n  @action\r\n  addMedium = () => {\r\n    this.mediums.push({\r\n      name: 'Medium' + (this.mediums.length + 1),\r\n      defaultQuality: 1,\r\n      defaultListeningCurrent: 1,\r\n      defaultSendingCurrent: 1,\r\n      defaultReceivingCurrent: 1,\r\n      channels: [],\r\n    });\r\n    this.activeMedium = this.mediums.length - 1;\r\n  };\r\n\r\n  @action\r\n  editMedium = (medium: MediumModel, id: number) => {\r\n    this.mediums[id] = medium;\r\n    this.activeMedium = undefined;\r\n  };\r\n\r\n  @action\r\n  removeMedium = (id: number) => {\r\n    this.mediums.splice(id, 1);\r\n    this.activeMedium = undefined;\r\n  };\r\n\r\n  @action\r\n  addChannelToMedium = (mediumId: number) => {\r\n    this.mediums[mediumId].channels.push({\r\n      name: 'Channel' + (this.mediums[mediumId].channels.length + 1),\r\n      buffer: 1024,\r\n    });\r\n  };\r\n\r\n  @action\r\n  editChannelFromMedium = (\r\n    mediumId: number,\r\n    channel: ChannelModel,\r\n    id: number\r\n  ) => {\r\n    this.mediums[mediumId].channels[id] = channel;\r\n  };\r\n\r\n  @computed\r\n  get listOfAllChannels() {\r\n    let channels: ChannelModel[] = [];\r\n\r\n    this.mediums.forEach((medium) => {\r\n      medium.channels.forEach((channel) => {\r\n        channels.push(channel);\r\n      });\r\n    });\r\n\r\n    return channels;\r\n  }\r\n\r\n  @action\r\n  removeChannelFromMedium = (mediumId: number, id: number) => {\r\n    this.mediums[mediumId].channels.splice(id, 1);\r\n\r\n    let tmp = [...this.mediums[mediumId].channels];\r\n    this.mediums[mediumId].channels = [];\r\n    setTimeout(() => {\r\n      this.mediums[mediumId].channels = tmp;\r\n    }, 50);\r\n  };\r\n\r\n  @action\r\n  changeActiveMedium = (id: number | undefined) => {\r\n    this.activeMedium = this.activeMedium === id ? undefined : id;\r\n  };\r\n\r\n  @action\r\n  addVersion = () => {\r\n    this.versions.push({\r\n      name: 'Version' + (this.versions.length + 1),\r\n      processes: [],\r\n    });\r\n\r\n    this.activeVersion = this.versions.length - 1;\r\n  };\r\n\r\n  @action\r\n  editVersion = (version: Version, id: number) => {\r\n    this.versions[id] = version;\r\n    this.activeVersion = undefined;\r\n  };\r\n\r\n  @action\r\n  removeVersion = (id: number) => {\r\n    this.versions.splice(id, 1);\r\n    this.activeVersion = undefined;\r\n  };\r\n\r\n  @action\r\n  addProcessToVersion = (versionId: number) => {\r\n    this.versions[versionId].processes.push({\r\n      name: 'Process' + (this.versions[versionId].processes.length + 1),\r\n      time: 100,\r\n    });\r\n  };\r\n\r\n  @action\r\n  editProcessInVersion = (versionId: number, process: Process, id: number) => {\r\n    this.versions[versionId].processes[id] = process;\r\n  };\r\n\r\n  @action\r\n  removeProcessFromVersion = (versionId: number, id: number) => {\r\n    this.versions[versionId].processes.splice(id, 1);\r\n\r\n    let tmp = [...this.versions[versionId].processes];\r\n    this.versions[versionId].processes = [];\r\n    setTimeout(() => {\r\n      this.versions[versionId].processes = tmp;\r\n    }, 50);\r\n  };\r\n\r\n  @action\r\n  changeActiveVersion = (id: number | undefined) => {\r\n    this.activeVersion = this.activeVersion === id ? undefined : id;\r\n  };\r\n\r\n  @action\r\n  changeTopologyElements = (elements: TopologyElement[]) => {\r\n    this.topologyElements = elements;\r\n  };\r\n\r\n  @action getAllModels = () => {\r\n    // console.log('deviceTypes', JSON.stringify(toJS(this.deviceTypes)));\r\n    // console.log('mediums', JSON.stringify(toJS(this.mediums)));\r\n    // console.log('topology', JSON.stringify(toJS(this.topologyElements)));\r\n    // console.log('versions', JSON.stringify(toJS(this.versions)));\r\n\r\n    return {\r\n      deviceTypes: toJS(this.deviceTypes),\r\n      mediums: toJS(this.mediums),\r\n      topology: toJS(this.topologyElements),\r\n      versions: toJS(this.versions),\r\n    };\r\n  };\r\n\r\n  checkDeviceTypeNameUniqueness = (name: string) => {\r\n    const id = this.deviceTypes.findIndex((v) => v.name === name);\r\n    return id === -1 || id === this.activeDeviceType;\r\n  };\r\n\r\n  checkMediumNameUniqueness = (name: string) => {\r\n    const id = this.mediums.findIndex((v) => v.name === name);\r\n    return id === -1 || id === this.activeMedium;\r\n  };\r\n\r\n  checkChannelNameUniqueness = (name: string, currentChannelId: number) => {\r\n    let state = true;\r\n    this.mediums.forEach((v) => {\r\n      const valid =\r\n        v.channels.findIndex(\r\n          (v, index) => v.name === name && index !== currentChannelId\r\n        ) === -1;\r\n\r\n      if (!valid) {\r\n        state = false;\r\n      }\r\n    });\r\n    return state;\r\n  };\r\n\r\n  checkVersionNameUniqueness = (name: string) => {\r\n    const id = this.versions.findIndex((v) => v.name === name);\r\n    return id === -1 || id === this.activeVersion;\r\n  };\r\n\r\n  checkProcessNameUniqueness = (name: string, currentProcessId: number) => {\r\n    let state = true;\r\n    this.versions.forEach((v) => {\r\n      const valid =\r\n        v.processes.findIndex(\r\n          (v, index) => v.name === name && index !== currentProcessId\r\n        ) === -1;\r\n      if (!valid) {\r\n        state = false;\r\n      }\r\n    });\r\n    return state;\r\n  };\r\n}\r\n\r\nexport default SimulationsStore;\r\n","import UserStore from './UserStore';\r\nimport SimulationsStore from './SimulationsStore';\r\nimport NewSimulationStore from './NewSimulationStore';\r\nimport { SimulationTemplate } from '../models/SimulationTemplate.model';\r\n\r\nexport class RootStore {\r\n  userStore: UserStore;\r\n  simulationsStore: SimulationsStore;\r\n  newSimulationStore: NewSimulationStore;\r\n\r\n  constructor() {\r\n    this.userStore = new UserStore(this);\r\n    this.simulationsStore = new SimulationsStore(this);\r\n    this.newSimulationStore = new NewSimulationStore(this);\r\n  }\r\n\r\n  resetNewSimulationStore = () => {\r\n    this.newSimulationStore = new NewSimulationStore(this);\r\n  };\r\n\r\n  setSimulationModel = (simulation: SimulationTemplate) => {\r\n    this.newSimulationStore.setDeviceTypes(JSON.parse(simulation.deviceTypes));\r\n    this.newSimulationStore.setMediums(JSON.parse(simulation.mediums));\r\n    this.newSimulationStore.setTopologyElements(\r\n      JSON.parse(simulation.topology)\r\n    );\r\n    this.newSimulationStore.setVersions(JSON.parse(simulation.versions));\r\n  };\r\n}\r\n\r\nexport default RootStore;\r\n","import React from 'react';\r\nimport { Redirect, Link } from 'react-router-dom';\r\n//styles\r\nimport './Dropdown.css';\r\n//mobx\r\nimport { IoIosPerson } from 'react-icons/io';\r\nimport { inject, observer } from 'mobx-react';\r\nimport RootStore from '../../stores/RootStore';\r\n\r\ninterface IProps {\r\n  store?: RootStore;\r\n}\r\n\r\n@inject('store')\r\n@observer\r\nclass Dropdown extends React.Component<IProps> {\r\n  state = {\r\n    displayMenu: false,\r\n    redirectToReferrer: false,\r\n  };\r\n\r\n  showDropdownMenu = (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\r\n    event.preventDefault();\r\n    this.setState({ displayMenu: true }, () => {\r\n      document.addEventListener('click', this.hideDropdownMenu);\r\n    });\r\n  };\r\n\r\n  hideDropdownMenu = () => {\r\n    this.setState({ displayMenu: false }, () => {\r\n      document.removeEventListener('click', this.hideDropdownMenu);\r\n    });\r\n  };\r\n\r\n  logout = () => {\r\n    this.props.store?.userStore.logout(() => {\r\n      this.setState({ redirectToReferrer: true });\r\n    });\r\n  };\r\n\r\n  render() {\r\n    if (this.state.redirectToReferrer) {\r\n      return <Redirect to=\"/login\" />;\r\n    }\r\n\r\n    return (\r\n      <div className=\"dropdown\">\r\n        <div className=\"drop-button\" onClick={this.showDropdownMenu}>\r\n          <IoIosPerson />\r\n        </div>\r\n\r\n        {this.state.displayMenu && (\r\n          <ul>\r\n            <Link to=\"/change_password\">\r\n              <li>Change password</li>\r\n            </Link>\r\n            <li onClick={this.logout}>Logout</li>\r\n          </ul>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Dropdown;\r\n","import React from 'react';\r\nimport Dropdown from './dropdown/Dropdown';\r\nimport { inject, observer } from 'mobx-react';\r\nimport RootStore from '../stores/RootStore';\r\nimport { Link } from 'react-router-dom';\r\n\r\ninterface IProps {\r\n  store?: RootStore;\r\n}\r\n\r\n@inject('store')\r\n@observer\r\nclass Navbar extends React.Component<IProps> {\r\n  render() {\r\n    if (\r\n      this.props.store?.userStore.token === '' &&\r\n      localStorage.getItem('token') === null\r\n    ) {\r\n      return null;\r\n    }\r\n\r\n    return (\r\n      <div className=\"top-bar\">\r\n        <div className=\"app-main-logo\">\r\n          <Link to=\"/\">\r\n            <h3>\r\n              <span>QoP-ML</span> Web Tool\r\n            </h3>\r\n          </Link>\r\n        </div>\r\n        <Dropdown />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Navbar;\r\n","import React from 'react';\r\n//mobx\r\nimport {inject, observer} from 'mobx-react';\r\nimport RootStore from '../stores/RootStore';\r\n\r\ninterface IProps {\r\n  store?: RootStore;\r\n}\r\n\r\n@inject('store')\r\n@observer\r\nclass Navbar extends React.Component<IProps> {\r\n  render() {\r\n    if(\r\n      this.props.store?.userStore.token === '' &&\r\n      localStorage.getItem('token') === null\r\n    ) {\r\n      return null;\r\n    }\r\n\r\n    return (\r\n      <footer>\r\n        <p>QoP-ML Web Tool. UMCS 2020</p>\r\n      </footer>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Navbar;","export function classNames(classes: any) {\r\n  return Object.entries(classes)\r\n    .filter(([key, value]) => value)\r\n    .map(([key, value]) => key)\r\n    .join(' ');\r\n}\r\n","import React, { ChangeEvent } from 'react';\r\n//utils\r\nimport { classNames } from '../utils/ClassNames';\r\n\r\ninterface IProps {\r\n  type?: 'email' | 'password' | 'elementName';\r\n  white?: boolean;\r\n  initialValue?: string;\r\n}\r\n\r\ninterface IState {\r\n  value: string;\r\n  errorText: string;\r\n  error: boolean;\r\n}\r\n\r\nconst regexes = {\r\n  email: {\r\n    regex: /^[_a-zA-Z0-9-]+(\\.[_a-zA-Z0-9-+]+)*@[a-zA-Z0-9-]{1,60}(\\.[a-zA-Z0-9-]+)*(\\.[a-zA-Z]{2,4})$/,\r\n    alert: 'Invalid email address.',\r\n  },\r\n  password: {\r\n    regex: /^.{6,}$/,\r\n    alert: 'Invalid password.',\r\n  },\r\n  elementName: {\r\n    regex: /^[_a-zA-Z0-9]{3,}$/,\r\n    alert: 'Invalid value.',\r\n  },\r\n};\r\n\r\nexport default class Input extends React.Component<IProps, IState> {\r\n  constructor(props: IProps) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      value: props.initialValue || '',\r\n      errorText: '',\r\n      error: false,\r\n    };\r\n  }\r\n\r\n  validate = () => {\r\n    const { type } = this.props;\r\n\r\n    if (type !== undefined) {\r\n      if (type === 'password') {\r\n        if (!regexes.password.regex.test(this.state.value)) {\r\n          this.setState({ errorText: regexes.password.alert, error: true });\r\n          return;\r\n        }\r\n      } else if (type === 'email') {\r\n        if (!regexes.email.regex.test(this.state.value)) {\r\n          this.setState({ errorText: regexes.email.alert, error: true });\r\n          return;\r\n        }\r\n      } else if (type === 'elementName') {\r\n        if (!regexes.elementName.regex.test(this.state.value)) {\r\n          this.setState({ errorText: regexes.elementName.alert, error: true });\r\n          return;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (this.state.value.length === 0) {\r\n      this.setState({ errorText: \"This field can't be empty.\", error: true });\r\n      return false;\r\n    } else {\r\n      this.setState({ errorText: '', error: false });\r\n      return true;\r\n    }\r\n  };\r\n\r\n  setValidity = (error: boolean, message: string = '') => {\r\n    this.setState({ error, errorText: message });\r\n  };\r\n\r\n  getValue = () => {\r\n    return this.state.value;\r\n  };\r\n\r\n  setValue = (value: string) => {\r\n    this.setState({ value });\r\n  };\r\n\r\n  handleChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n    this.setState({ value: event.target.value, errorText: '', error: false });\r\n  };\r\n\r\n  render() {\r\n    const classes = classNames({\r\n      input: true,\r\n      'input-danger': this.state.error,\r\n      'input-reversed': this.props.white,\r\n    });\r\n\r\n    return (\r\n      <>\r\n        <input\r\n          className={classes}\r\n          onChange={this.handleChange}\r\n          value={this.state.value}\r\n          type={this.props.type === 'password' ? 'password' : ''}\r\n        />\r\n        {!!this.state.errorText && (\r\n          <p className=\"label-danger\">{this.state.errorText}</p>\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n}\r\n","import EN from '../assets/translations/en';\r\n\r\nconst TranslationService = EN;\r\n\r\nexport default TranslationService;\r\n","const en = {\r\n  //ChangePasswordPage\r\n  change_password: 'Change password',\r\n  old_password: 'Old password',\r\n  new_password: 'New Password',\r\n  confirm_new_password: 'Confirm new password',\r\n  passwords_not_the_same: 'Passwords are not the same.',\r\n\r\n  //LoginPage\r\n  log_into: 'Login to the system',\r\n  invalid_cridentials: 'Invalid cridentials.',\r\n  email_address: 'Email address',\r\n  password: 'Password',\r\n  not_have_accout: 'Not have account yet? ',\r\n  sign_up: 'Sign up',\r\n  log_in: 'Log In',\r\n  registered: 'Successfully registered. You can log in.',\r\n\r\n  //RegisterPage\r\n  confirm_password: 'Confirm password',\r\n  sign_in: 'Sign in',\r\n  have_account: 'Do have account yet? ',\r\n  email_used: 'There is already an account with this email address.',\r\n\r\n  //SimulationsPage\r\n  my_simulations: 'My simulations',\r\n  create_simulation: 'Create simulation',\r\n\r\n  //SimulationDetailsPage\r\n  device: 'Device',\r\n  time_in_s: 'Time (s)',\r\n  status: 'Status',\r\n  go_back: 'Go back',\r\n  simulation_details: 'Simulation Details',\r\n  date: 'Date',\r\n  details: 'Details',\r\n  simulation_not_found: 'Simulation not found.',\r\n\r\n  //DeviceTypesPage\r\n  device_types: 'Devices types',\r\n  device_types_tooltip: 'Add device type to add new devices.',\r\n  add_device_types: 'Add device type',\r\n  device_details: 'Device details',\r\n  save: 'Save',\r\n  primary: 'Primary',\r\n  device_icon: 'Device icon',\r\n  device_name: 'Device name',\r\n  scheduling_algorithm: 'Scheduling algorithm',\r\n  informational: 'Informational',\r\n  no_device_added_header: 'No device type added',\r\n  no_device_added_description: 'Add element to make simulation.',\r\n\r\n  //MediumChannelsPage\r\n  mediums: 'Mediums',\r\n  mediums_tooltip: 'Add mediums and channels to it.',\r\n  add_medium: 'Add medium',\r\n  medium_details: 'Medium details',\r\n  medium_name: 'Medium name',\r\n  constants: 'Constants',\r\n  default_quality: 'Default quality',\r\n  default_listening_current: 'Default Listening Current (mA)',\r\n  default_sending_current: 'Default Sending Current (mA)',\r\n  default_recieving_current: 'Default Receiving Current (mA)',\r\n  channels: 'Channels',\r\n  channels_tooltip: 'Add channel to medium.',\r\n  add_channel: 'Add channel',\r\n  channel_name: 'Channel name',\r\n  buffer_name: 'Buffer size (B)',\r\n  is_infinity: 'Is infinity?',\r\n  no_medium_added_header: 'No medium added',\r\n  no_medium_added_description: 'Add element to make simulation.',\r\n\r\n  //SimulationMain\r\n  confirm: 'Confirm',\r\n  go_back_are_you_shure:\r\n    'Are you sure to go back? All progress in this step will be removed.',\r\n  cancel: 'Cancel',\r\n  accept: 'Accept',\r\n  warning: 'Warning',\r\n  problems_in_form: 'There are some problems in form.',\r\n  ok: 'OK',\r\n  add_element_in_page: 'You must add element in this page.',\r\n  start_simulation: 'Start simulation',\r\n  start_simulation_description: 'Press the play button to start simulation.',\r\n  starting: 'Starting...',\r\n  something_error: 'Something went wrong...',\r\n  try_again: 'Try again',\r\n\r\n  //VersionsPage\r\n  version_name: 'Version name',\r\n  unique_name: \"The name isn't unique.\",\r\n  versions: 'Versions',\r\n  versions_and_proccesses: 'Versions and processes',\r\n  versions_and_proccesses_tooltip: 'Add version and processes to them.',\r\n  add_version: 'Add version',\r\n  version_details: 'Version details',\r\n  processes: 'Processes',\r\n  add_process: 'Add process',\r\n  no_version_added_header: 'No version added',\r\n  no_version_added_description: 'Add element to make simulation.',\r\n\r\n  //Process\r\n  process_name: 'Process name',\r\n  device_instance: 'Device Instance',\r\n  execution_time: 'Execution time (ms)',\r\n  infinity_process: 'Infinity process',\r\n  process_with_recieve: 'Process with recieve',\r\n  recieve_from_channel: 'Recieve from channel',\r\n  process_with_send: 'Process with send',\r\n  send_channel: 'Send channel',\r\n  device_to_sent: 'Device to sent',\r\n  size_to_sent: 'Data size to sent [B]',\r\n\r\n  //Select\r\n  select_option: 'Select an option',\r\n\r\n  //SimulationListElement\r\n  running: 'Running',\r\n  pending: 'Pending',\r\n\r\n  //NodeWidget\r\n  in: 'in',\r\n  out: 'out',\r\n\r\n  //BodyWidget\r\n  topology: 'Topology',\r\n  topology_tooltip:\r\n    'Add hosts and make connections betwwen them. To add host drag and drop device type from list. To remove host check it and click Delete button.',\r\n  available_devices: 'Available devices',\r\n  drag_and_drop: 'Drag and drop to add.',\r\n\r\n  //SimulationBottomBar\r\n  redo_stop: 'Redo step',\r\n  next_step: 'Next step',\r\n\r\n  //Tooltips\r\n  device_icon_tooltip:\r\n    'The icon is only used to easily recognize the device when creating a simulation.',\r\n  device_name_tooltip: 'Identify your device type.',\r\n  device_scheduling_tooltip:\r\n    'Choose how to manage the processes on the device.',\r\n  device_informal_tooltip: 'Enter data about your device type.',\r\n\r\n  medium_name_tooltip: 'Identify your medium.',\r\n  medium_constants_tooltip: 'Enter the constant values ​​of the medium.',\r\n  channel_name_tooltip: 'Identify your channel.',\r\n  channel_buffer_tooltip:\r\n    'Enter the size of the buffer, if you want it to be unlimited, check the checkbox below.',\r\n\r\n  version_name_tooltip: 'Identify your version.',\r\n  process_name_tooltip: 'Identify your process.',\r\n  process_device_instance_tooltip:\r\n    'Select the device on which the process is to be executed.',\r\n  process_execution_time_tooltip: 'Enter the time of the process execution.',\r\n  process_infinity_tooltip:\r\n    'If you want the process to run continuously, select this option.',\r\n  process_recieve_tooltip:\r\n    'Select if the process receives data using an available channel.',\r\n  process_send_tooltip:\r\n    'Select if the process sends data, then select the target channel and device.',\r\n};\r\n\r\nexport default en;\r\n","import React from 'react';\r\nimport './Login.css';\r\n//mobx\r\nimport { inject, observer } from 'mobx-react';\r\nimport RootStore from '../../stores/RootStore';\r\n//components\r\nimport Input from '../../components/Input';\r\n//navigation\r\nimport { withRouter, Link } from 'react-router-dom';\r\n//services\r\nimport TranslationService from '../../services/TranslationService';\r\n\r\ninterface IProps {\r\n  store?: RootStore;\r\n  navigation?: any;\r\n  history: any;\r\n  location: any;\r\n  match: any;\r\n}\r\n\r\n@inject('store')\r\n@observer\r\nclass LoginPage extends React.Component<IProps> {\r\n  emailInputRef = React.createRef<Input>();\r\n  passwordInputRef = React.createRef<Input>();\r\n\r\n  navigateAfterLogin = () => {\r\n    this.props.history.push('/simulations');\r\n  };\r\n\r\n  login = async (event: any) => {\r\n    event.preventDefault();\r\n\r\n    const emailInput = this.emailInputRef.current;\r\n    const passwordInput = this.passwordInputRef.current;\r\n\r\n    if (emailInput && passwordInput) {\r\n      const emailValidation = emailInput.validate();\r\n      const passwordValidation = passwordInput.validate();\r\n\r\n      if (emailValidation && passwordValidation) {\r\n        const email = emailInput.getValue();\r\n        const password = passwordInput.getValue();\r\n\r\n        const data = {\r\n          email,\r\n          password,\r\n        };\r\n\r\n        this.props.store?.userStore.login(data, this.navigateAfterLogin);\r\n      }\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const loginError = this.props.store?.userStore.loginError;\r\n    const { registeredPrompt } = this.props.store?.userStore!;\r\n    return (\r\n      <div className=\"main-container\">\r\n        <div className=\"form-center-container\">\r\n          <div className=\"logo-main-container\">\r\n            <div className=\"logo-center-container\"></div>\r\n            <div className=\"app-header\">\r\n              <h3>\r\n                <span>QoP-ML</span> Web Tool\r\n              </h3>\r\n            </div>\r\n          </div>\r\n\r\n          <form onSubmit={this.login}>\r\n            <p className=\"title\">{TranslationService.log_into}</p>\r\n            {registeredPrompt && (\r\n              <p className=\"label-danger\">{TranslationService.registered}</p>\r\n            )}\r\n\r\n            {loginError && (\r\n              <p className=\"label-danger\">\r\n                {TranslationService.invalid_cridentials}\r\n              </p>\r\n            )}\r\n\r\n            <label>{TranslationService.email_address}</label>\r\n            <Input ref={this.emailInputRef} type=\"email\" />\r\n            <label>{TranslationService.password}</label>\r\n            <Input ref={this.passwordInputRef} type=\"password\" />\r\n            <input\r\n              className=\"button\"\r\n              type=\"submit\"\r\n              value={TranslationService.log_in}\r\n            />\r\n            <p>\r\n              {TranslationService.not_have_accout}\r\n              <Link to=\"/register\">\r\n                <span>{TranslationService.sign_up}</span>\r\n              </Link>\r\n            </p>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(LoginPage);\r\n","import React from 'react';\r\nimport './Register.css';\r\n//components\r\nimport Input from '../../components/Input';\r\n//navigation\r\nimport { withRouter, Link } from 'react-router-dom';\r\n//mobx\r\nimport { inject, observer } from 'mobx-react';\r\nimport RootStore from '../../stores/RootStore';\r\n//services\r\nimport TranslationService from '../../services/TranslationService';\r\n\r\ninterface IProps {\r\n  store?: RootStore;\r\n  navigation?: any;\r\n  history: any;\r\n  location: any;\r\n  match: any;\r\n}\r\n\r\n@inject('store')\r\n@observer\r\nclass RegisterPage extends React.Component<IProps> {\r\n  emailInputRef = React.createRef<Input>();\r\n  passwordInputRef = React.createRef<Input>();\r\n  confirmPasswordInputRef = React.createRef<Input>();\r\n\r\n  navigateAfterRegister = () => {\r\n    this.props.history.push('/login');\r\n  };\r\n\r\n  register = async (event: any) => {\r\n    event.preventDefault();\r\n\r\n    const emailInput = this.emailInputRef.current;\r\n    const passwordInput = this.passwordInputRef.current;\r\n    const confirmPasswordInput = this.confirmPasswordInputRef.current;\r\n\r\n    if (emailInput && passwordInput && confirmPasswordInput) {\r\n      const emailValidation = emailInput.validate();\r\n      const passwordValidation = passwordInput.validate();\r\n      const confirmPasswordValidation = confirmPasswordInput.validate();\r\n\r\n      if (emailValidation && passwordValidation && confirmPasswordValidation) {\r\n        const email = emailInput.getValue();\r\n        const password = passwordInput.getValue();\r\n        const confirmPassword = confirmPasswordInput.getValue();\r\n\r\n        if (password !== confirmPassword) {\r\n          passwordInput.setValidity(\r\n            true,\r\n            TranslationService.passwords_not_the_same\r\n          );\r\n          confirmPasswordInput.setValidity(true);\r\n          return;\r\n        }\r\n\r\n        const data = {\r\n          email,\r\n          password,\r\n          confirmPassword,\r\n        };\r\n\r\n        this.props.store?.userStore.register(\r\n          data,\r\n          this.navigateAfterRegister,\r\n          this.onErrorCallback\r\n        );\r\n      }\r\n    }\r\n  };\r\n\r\n  onErrorCallback = (error: any) => {\r\n    // console.log(error);\r\n\r\n    if (\r\n      error?.message === 'There is already an account with this email address'\r\n    ) {\r\n      this.emailInputRef.current?.setValidity(\r\n        true,\r\n        TranslationService.email_used\r\n      );\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"main-container\">\r\n        <div className=\"form-center-container\">\r\n          <div className=\"logo-main-container\">\r\n            <div className=\"logo-center-container\"></div>\r\n            <div className=\"app-header\">\r\n              <h3>\r\n                <span>QoP-ML</span> Web Tool\r\n              </h3>\r\n            </div>\r\n          </div>\r\n\r\n          <form onSubmit={this.register}>\r\n            <p className=\"title\">{TranslationService.sign_up}</p>\r\n\r\n            <label>{TranslationService.email_address}</label>\r\n            <Input ref={this.emailInputRef} type=\"email\" />\r\n\r\n            <label>{TranslationService.password}</label>\r\n            <Input ref={this.passwordInputRef} type=\"password\" />\r\n\r\n            <label>{TranslationService.confirm_password}</label>\r\n            <Input ref={this.confirmPasswordInputRef} type=\"password\" />\r\n\r\n            <input\r\n              className=\"button\"\r\n              type=\"submit\"\r\n              value={TranslationService.sign_up}\r\n            />\r\n\r\n            <p>\r\n              {TranslationService.have_account}\r\n              <Link to=\"/login\">\r\n                <span>{TranslationService.sign_in}</span>\r\n              </Link>\r\n            </p>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(RegisterPage);\r\n","import React from 'react';\r\nimport moment from 'moment';\r\n//models\r\nimport { SimulationListElement as SimulationModel } from '../../models/SimulationListElement.model';\r\n//styles\r\nimport './SimulationListElement.css';\r\nimport 'react-loader-spinner/dist/loader/css/react-spinner-loader.css';\r\n//components\r\n//@ts-ignore\r\nimport Loader from 'react-loader-spinner';\r\n//utils\r\nimport { classNames } from '../../utils/ClassNames';\r\nimport { Link } from 'react-router-dom';\r\nimport TranslationService from '../../services/TranslationService';\r\n\r\ninterface IProps {\r\n  simulation: SimulationModel;\r\n}\r\n\r\nclass SimulationListElement extends React.Component<IProps> {\r\n  state = {};\r\n\r\n  renderStatusInfo = (status: string, id: number) => {\r\n    switch (status) {\r\n      case '2':\r\n        return (\r\n          <>\r\n            <span className=\"status-column status-column-passed\">Passed</span>\r\n            <Link\r\n              className=\"details-column details-column-link\"\r\n              to={'/details/' + id}\r\n            >\r\n              {TranslationService.details}\r\n            </Link>\r\n          </>\r\n        );\r\n      case '3':\r\n        return (\r\n          <>\r\n            <span className=\"status-column status-column-error\">Error</span>\r\n            <Link\r\n              className=\"details-column details-column-link\"\r\n              to={'/details/' + id}\r\n            >\r\n              {TranslationService.details}\r\n            </Link>\r\n          </>\r\n        );\r\n      case '0':\r\n        return (\r\n          <>\r\n            <span className=\"status-column\"> {TranslationService.running}</span>\r\n            <div className=\"details-column\">\r\n              <Loader type=\"Circles\" color=\"#264766\" height={20} width={20} />\r\n            </div>\r\n          </>\r\n        );\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { simulation } = this.props;\r\n\r\n    const classes = classNames({\r\n      'status-indicator': true,\r\n      'status-indicator-pending': simulation.status === '4',\r\n      'status-indicator-passed': simulation.status === '2',\r\n      'status-indicator-error': simulation.status === '3',\r\n      'status-indicator-running': simulation.status === '0',\r\n    });\r\n\r\n    return (\r\n      <div className=\"simulation-container\">\r\n        <div className={classes} />\r\n        <div className=\"simulation-inside-container\">\r\n          <p>{moment(simulation.createdAt).format('DD.MM.YYYY HH:mm')}</p>\r\n          {this.renderStatusInfo(simulation.status, simulation.id)}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SimulationListElement;\r\n","import React from 'react';\r\nimport './SimulationsList.css';\r\nimport ReactPaginate from 'react-paginate';\r\n//mobx\r\nimport { inject, observer } from 'mobx-react';\r\nimport { toJS } from 'mobx';\r\nimport RootStore from '../../stores/RootStore';\r\n//navigation\r\nimport { withRouter, Link } from 'react-router-dom';\r\n//components\r\nimport SimulationListElement from '../../components/simulation-list-element/SimulationListElement';\r\nimport { IoIosAdd, IoIosRefresh } from 'react-icons/io';\r\n//@ts-ignore\r\nimport Loader from 'react-loader-spinner';\r\n//services\r\nimport TranslationService from '../../services/TranslationService';\r\n\r\ninterface IProps {\r\n  store?: RootStore;\r\n  navigation?: any;\r\n  history: any;\r\n  location: any;\r\n  match: any;\r\n}\r\n\r\n@inject('store')\r\n@observer\r\nclass SimulationsListPage extends React.Component<IProps> {\r\n  state = {\r\n    redirectToReferrer: false,\r\n  };\r\n\r\n  componentDidMount = () => {\r\n    this.props.store?.simulationsStore.getSimulationsList();\r\n  };\r\n\r\n  onChangePage = ({ selected }: { selected: number }) => {\r\n    this.props.store?.simulationsStore.changeSimulationPage(selected);\r\n    this.props.store?.simulationsStore.getSimulationsList();\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      simulations,\r\n      simulationsCount,\r\n      loadingSimulations,\r\n      getSimulationsList,\r\n    } = this.props.store?.simulationsStore!;\r\n\r\n    return (\r\n      <div className=\"main-default-container\">\r\n        <div className=\"header-container\">\r\n          <h2>{TranslationService.my_simulations}</h2>\r\n          <div className=\"buttons-container\">\r\n            <div\r\n              onClick={getSimulationsList}\r\n              className=\"round-button round-button-secondary refresh-button\"\r\n            >\r\n              <IoIosRefresh />\r\n            </div>\r\n            <div className=\"round-button round-button-primary\">\r\n              <IoIosAdd />\r\n              <Link to=\"/simulation\">\r\n                <p>{TranslationService.create_simulation}</p>\r\n              </Link>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"section\">\r\n          {!loadingSimulations ? (\r\n            <>\r\n              {simulations.map((simulation, index) => (\r\n                <SimulationListElement\r\n                  key={'simulation' + index + simulation.createdAt}\r\n                  simulation={toJS(simulation)}\r\n                />\r\n              ))}\r\n              {simulationsCount === 0 && (\r\n                <div className=\"big-loader-container\">\r\n                  <p>No simulations.</p>\r\n                </div>\r\n              )}\r\n            </>\r\n          ) : (\r\n            <div className=\"big-loader-container\">\r\n              <Loader type=\"Circles\" color=\"#264766\" height={40} width={40} />\r\n            </div>\r\n          )}\r\n\r\n          <ReactPaginate\r\n            pageCount={Math.ceil(simulationsCount / 10)}\r\n            pageRangeDisplayed={4}\r\n            marginPagesDisplayed={1}\r\n            containerClassName=\"pagination-container\"\r\n            pageLinkClassName=\"pagination-page\"\r\n            previousLinkClassName=\"pagination-navigation-button pagination-left-button\"\r\n            nextLinkClassName=\"pagination-navigation-button pagination-right-button\"\r\n            previousLabel=\"Previous\"\r\n            nextLabel=\"Next\"\r\n            activeLinkClassName=\"pagination-page-active\"\r\n            onPageChange={this.onChangePage}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(SimulationsListPage);\r\n","import React from 'react';\r\nimport './ChangePassword.css';\r\n//mobx\r\nimport { inject, observer } from 'mobx-react';\r\nimport RootStore from '../../stores/RootStore';\r\n//components\r\nimport Input from '../../components/Input';\r\n//navigation\r\nimport { withRouter } from 'react-router-dom';\r\n//services\r\nimport TranslationService from '../../services/TranslationService';\r\n\r\ninterface IProps {\r\n  store?: RootStore;\r\n  navigation?: any;\r\n  history: any;\r\n  location: any;\r\n  match: any;\r\n}\r\n\r\n@inject('store')\r\n@observer\r\nclass ChangePasswordPage extends React.Component<IProps> {\r\n  oldPasswordInputRef = React.createRef<Input>();\r\n  newPasswordInputRef = React.createRef<Input>();\r\n  confirmNewPasswordInputRef = React.createRef<Input>();\r\n\r\n  state = {\r\n    redirectToReferrer: false,\r\n  };\r\n\r\n  navigateAfterAction = () => {\r\n    this.props.history.push('/simulations');\r\n  };\r\n\r\n  onInvaildOldPassword = () => {\r\n    const oldPasswordInput = this.oldPasswordInputRef.current;\r\n    if (oldPasswordInput) {\r\n      oldPasswordInput.setValidity(true, 'Incorrect user password.');\r\n    }\r\n  };\r\n\r\n  changePassword = (event: any) => {\r\n    event.preventDefault();\r\n    const oldPasswordInput = this.oldPasswordInputRef.current;\r\n    const newPasswordInputRef = this.newPasswordInputRef.current;\r\n    const confirmNewPasswordInput = this.confirmNewPasswordInputRef.current;\r\n\r\n    if (oldPasswordInput && newPasswordInputRef && confirmNewPasswordInput) {\r\n      const emailValidation = oldPasswordInput.validate();\r\n      const passwordValidation = newPasswordInputRef.validate();\r\n      const confirmPasswordValidation = confirmNewPasswordInput.validate();\r\n\r\n      if (emailValidation && passwordValidation && confirmPasswordValidation) {\r\n        const old_password = oldPasswordInput.getValue();\r\n        const new_password = newPasswordInputRef.getValue();\r\n        const confirm_new_password = confirmNewPasswordInput.getValue();\r\n\r\n        if (new_password !== confirm_new_password) {\r\n          newPasswordInputRef.setValidity(true, 'Hasła nie są takie same.');\r\n          confirmNewPasswordInput.setValidity(true);\r\n          return;\r\n        }\r\n\r\n        const data = {\r\n          old_password,\r\n          new_password,\r\n          confirm_new_password,\r\n        };\r\n\r\n        this.props.store?.userStore.changePassword(\r\n          data,\r\n          this.navigateAfterAction,\r\n          this.onInvaildOldPassword\r\n        );\r\n      }\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"main-default-container\">\r\n        <form className=\"change-password-form\" onSubmit={this.changePassword}>\r\n          <h2>{TranslationService.change_password}</h2>\r\n          <label>{TranslationService.old_password}</label>\r\n          <Input ref={this.oldPasswordInputRef} type=\"password\" />\r\n          <label>{TranslationService.new_password}</label>\r\n          <Input ref={this.newPasswordInputRef} type=\"password\" />\r\n          <label>{TranslationService.confirm_new_password}</label>\r\n          <Input ref={this.confirmNewPasswordInputRef} type=\"password\" />\r\n          <input\r\n            className=\"button\"\r\n            type=\"submit\"\r\n            value={TranslationService.change_password}\r\n          />\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(ChangePasswordPage);\r\n","import React from 'react';\r\nimport {\r\n  IoIosDesktop,\r\n  IoIosPlay,\r\n  IoIosGitNetwork,\r\n  IoIosWifi,\r\n  IoIosList,\r\n  IoIosCheckmarkCircle,\r\n} from 'react-icons/io';\r\nimport TranslationService from '../services/TranslationService';\r\n\r\ninterface IProps {\r\n  position: number;\r\n  changePosition: (num: number) => void;\r\n}\r\n\r\nconst ListElements = [\r\n  {\r\n    position: 0,\r\n    Icon: IoIosDesktop,\r\n  },\r\n  {\r\n    position: 1,\r\n    Icon: IoIosWifi,\r\n  },\r\n  {\r\n    position: 2,\r\n    Icon: IoIosGitNetwork,\r\n  },\r\n  {\r\n    position: 3,\r\n    Icon: IoIosList,\r\n  },\r\n  {\r\n    position: 4,\r\n    Icon: IoIosPlay,\r\n  },\r\n];\r\n\r\nclass SimulationBottomBar extends React.Component<IProps> {\r\n  render() {\r\n    return (\r\n      <div className=\"simulation-bottom-bar-outside\">\r\n        <div className=\"simulation-bottom-bar\">\r\n          <div className=\"simulation-bar-button-container\">\r\n            {this.props.position > 0 && (\r\n              <div\r\n                onClick={() =>\r\n                  this.props.changePosition(this.props.position - 1)\r\n                }\r\n                className=\"round-button round-button-secondary\"\r\n              >\r\n                <p>{TranslationService.redo_stop}</p>\r\n              </div>\r\n            )}\r\n          </div>\r\n\r\n          <div className=\"simulation-bottom-bar-icon-container\">\r\n            {ListElements.map((element) => (\r\n              <div>\r\n                <element.Icon\r\n                  style={{ marginLeft: 10, marginRight: 10 }}\r\n                  color={\r\n                    element.position === this.props.position ? '#264766' : 'gray'\r\n                  }\r\n                />\r\n                {element.position < this.props.position && (\r\n                  <div className=\"simulation-bottom-bar-done-step\">\r\n                    <IoIosCheckmarkCircle />\r\n                  </div>\r\n                )}\r\n              </div>\r\n            ))}\r\n          </div>\r\n\r\n          <div className=\"simulation-bar-button-container\">\r\n            {this.props.position < 4 && (\r\n              <div\r\n                onClick={() =>\r\n                  this.props.changePosition(this.props.position + 1)\r\n                }\r\n                className=\"round-button round-button-primary\"\r\n              >\r\n                <p>{TranslationService.next_step}</p>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SimulationBottomBar;\r\n","import React from 'react';\r\nimport { IoIosHelp } from 'react-icons/io';\r\nimport Tooltip from 'rc-tooltip';\r\n//styles\r\nimport \"./Tooltip.css\"\r\nimport { classNames } from '../../utils/ClassNames';\r\n\r\ninterface IProps {\r\n  title?: string;\r\n  content?: string;\r\n  placement?: 'top' | 'bottom' | 'left' | 'right';\r\n  type?: 'big' | 'small';\r\n}\r\n\r\nconst TooltipComponent = (props: IProps) => {\r\n  const classes = classNames({\r\n    'tooltip-hover': true,\r\n    'tooltip-hover-small': props.type === 'small',\r\n  });\r\n  \r\n  return(\r\n    <Tooltip\r\n      placement={props.placement || \"top\"}\r\n      trigger={['hover']}\r\n      overlay={\r\n        <>\r\n          {!!props.title &&\r\n            <p className=\"tooltip-hover-title\">{props.title}</p>\r\n          }\r\n          <span className=\"tooltip-hover-description\">{props.content}</span>\r\n        </>\r\n      }\r\n      >\r\n      <div className={classes}>\r\n        <IoIosHelp />\r\n      </div>\r\n    </Tooltip>\r\n  );\r\n}\r\n\r\nexport default TooltipComponent;","import React from 'react';\r\n//models\r\nimport { DeviceType, Icons } from '../models/DeviceType.model';\r\n//utils\r\nimport { classNames } from '../utils/ClassNames';\r\n\r\ninterface IProps {\r\n  active: boolean;\r\n  onPress: (event: any) => void;\r\n  device: DeviceType;\r\n}\r\n\r\nclass DeviceTypeListElement extends React.Component<IProps> {\r\n  render() {\r\n    const { device, active, onPress } = this.props;\r\n\r\n    const classes = classNames({\r\n      'device-type-list-element': true,\r\n      'device-type-list-element-active': active,\r\n    });\r\n\r\n    const Icon = Icons.find((value) => value.name === device.icon)?.icon;\r\n\r\n    return (\r\n      <div className={classes} onClick={onPress}>\r\n        {!!Icon && <Icon />}\r\n        <div className=\"text-container\">{device.name}</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DeviceTypeListElement;\r\n","import React from 'react';\r\n//styles\r\nimport './IconPicker.css';\r\n//mobx\r\nimport RootStore from '../../stores/RootStore';\r\n//utils\r\nimport { classNames } from '../../utils/ClassNames';\r\n// models\r\nimport { Icons } from '../../models/DeviceType.model';\r\n\r\ninterface IProps {\r\n  store?: RootStore;\r\n}\r\n\r\nclass IconPicker extends React.Component<IProps> {\r\n\r\n  state = {\r\n    value: 0\r\n  };\r\n\r\n  setValue = (name: string) => {\r\n    this.setState({value: Icons.findIndex(value => value.name === name)});\r\n  }\r\n\r\n  getValue = () => {\r\n    return Icons[this.state.value].name;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"icon-picker-container\" >\r\n          {Icons.map((Element, index: number) => {\r\n            const classes = classNames({\r\n              'icon-picker-item': true,\r\n              'icon-picker-item-active': index === this.state.value,\r\n            });\r\n\r\n            return (\r\n              <div\r\n                key={\"icon\" + index}\r\n                className={classes}\r\n                onClick={() => this.setValue(Element.name)}\r\n              >\r\n                <Element.icon color={index === this.state.value ? '#264766' : 'gray'}/>\r\n              </div>\r\n            )       \r\n          })\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default IconPicker;","import React from 'react';\r\n//styles\r\nimport './Select.css';\r\n//components\r\nimport Dropdown, { Option } from 'react-dropdown';\r\nimport TranslationService from '../../services/TranslationService';\r\n\r\nexport interface SelectValue {\r\n  label: string;\r\n  value: any;\r\n}\r\ninterface IProps {\r\n  items: SelectValue[];\r\n  onChange?: (v: any) => void;\r\n}\r\n\r\ninterface IState {\r\n  value: SelectValue | undefined;\r\n}\r\nexport default class Select extends React.Component<IProps, IState> {\r\n  constructor(props: IProps) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      value: props.items ? props.items[0] : undefined,\r\n    };\r\n  }\r\n\r\n  onChange = (v: Option) => {\r\n    this.setState(\r\n      {\r\n        value: {\r\n          label: v.value,\r\n          value:\r\n            this.props.items.find((f) => v.value === f.label)?.value || v.value,\r\n        },\r\n      },\r\n      () => {\r\n        this.props.onChange && this.props.onChange(this.state.value?.value);\r\n      }\r\n    );\r\n  };\r\n\r\n  getValue = () => {\r\n    if (!this.state.value) {\r\n      return !!this.props.items ? this.props.items[0] : undefined;\r\n    }\r\n    return this.state.value;\r\n  };\r\n\r\n  setValue = (value: any) => {\r\n    this.setState({\r\n      value: {\r\n        label: this.props.items.find((f) => value === f.value)?.label || value,\r\n        value: value,\r\n      },\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { value } = this.state;\r\n    const { items } = this.props;\r\n\r\n    return (\r\n      <Dropdown\r\n        options={items.map((v) => v.label)}\r\n        onChange={this.onChange}\r\n        value={value?.label}\r\n        placeholder={TranslationService.select_option}\r\n      />\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { IoIosAdd, IoIosSave, IoIosTrash } from 'react-icons/io';\r\n//styles\r\nimport './Simulation.css';\r\n//mobx\r\nimport { inject, observer } from 'mobx-react';\r\nimport RootStore from '../../stores/RootStore';\r\n//components\r\nimport Input from '../../components/Input';\r\nimport Tooltip from '../../components/tooltip/Tooltip';\r\nimport DeviceTypeListElement from '../../components/DeviceTypeListElement';\r\nimport IconPicker from '../../components/icon-picker/IconPicker';\r\nimport Select, { SelectValue } from '../../components/select/Select';\r\n//models\r\nimport {\r\n  DeviceType as DeviceTypeModel,\r\n  CPUs,\r\n  OSes,\r\n  Libraries,\r\n} from '../../models/DeviceType.model';\r\n//services\r\nimport TranslationService from '../../services/TranslationService';\r\n\r\ninterface IProps {\r\n  store?: RootStore;\r\n}\r\n\r\nconst ScheduleTypes: SelectValue[] = [\r\n  { label: 'Round robin', value: 'rr' },\r\n  { label: 'FIFO', value: 'fifo' },\r\n];\r\n\r\n@inject('store')\r\n@observer\r\nclass DevicesTypes extends React.Component<IProps> {\r\n  iconPickerRef = React.createRef<IconPicker>();\r\n  nameInputRef = React.createRef<Input>();\r\n  cpuSelectRef = React.createRef<Select>();\r\n  osSelectRef = React.createRef<Select>();\r\n  libsSelectRef = React.createRef<Select>();\r\n  schedulingAlgorithmSelectRef = React.createRef<Select>();\r\n\r\n  setDataToForm = () => {\r\n    const {\r\n      deviceTypes,\r\n      activeDeviceType,\r\n    } = this.props.store!.newSimulationStore;\r\n\r\n    if (activeDeviceType !== undefined) {\r\n      const device = deviceTypes[activeDeviceType];\r\n\r\n      const iconPickerRef = this.iconPickerRef.current;\r\n      const nameInputRef = this.nameInputRef.current;\r\n      const cpuInputRef = this.cpuSelectRef.current;\r\n      const osInputRef = this.osSelectRef.current;\r\n      const librariesInputRef = this.libsSelectRef.current;\r\n      const schedulingAlgorithmSelectRef = this.schedulingAlgorithmSelectRef\r\n        .current;\r\n\r\n      if (\r\n        iconPickerRef &&\r\n        nameInputRef &&\r\n        cpuInputRef &&\r\n        osInputRef &&\r\n        librariesInputRef &&\r\n        schedulingAlgorithmSelectRef\r\n      ) {\r\n        iconPickerRef.setValue(device.icon);\r\n        nameInputRef.setValue(device.name);\r\n        cpuInputRef.setValue(device.cpu);\r\n        osInputRef.setValue(device.os);\r\n        librariesInputRef.setValue(device.libraries);\r\n        schedulingAlgorithmSelectRef.setValue(device.schedulingAlgorithm);\r\n      }\r\n    }\r\n  };\r\n\r\n  saveData = () => {\r\n    const {\r\n      editDeviceType,\r\n      activeDeviceType,\r\n      changeActiveDeviceType,\r\n      checkDeviceTypeNameUniqueness,\r\n    } = this.props.store!.newSimulationStore;\r\n\r\n    if (activeDeviceType !== undefined) {\r\n      const iconPickerRef = this.iconPickerRef.current;\r\n      const nameInputRef = this.nameInputRef.current;\r\n      const cpuInputRef = this.cpuSelectRef.current;\r\n      const osInputRef = this.osSelectRef.current;\r\n      const librariesInputRef = this.libsSelectRef.current;\r\n      const schedulingAlgorithmSelectRef = this.schedulingAlgorithmSelectRef\r\n        .current;\r\n\r\n      if (\r\n        iconPickerRef &&\r\n        nameInputRef &&\r\n        cpuInputRef &&\r\n        osInputRef &&\r\n        librariesInputRef &&\r\n        schedulingAlgorithmSelectRef\r\n      ) {\r\n        const nameValidity = nameInputRef.validate();\r\n\r\n        if (nameValidity) {\r\n          const updatedDevice: DeviceTypeModel = {\r\n            icon: iconPickerRef.getValue(),\r\n            name: nameInputRef.getValue(),\r\n            cpu: cpuInputRef.getValue()?.label!,\r\n            os: osInputRef.getValue()?.label!,\r\n            libraries: librariesInputRef.getValue()?.label!,\r\n            schedulingAlgorithm: schedulingAlgorithmSelectRef.getValue()?.value,\r\n          };\r\n\r\n          if (!checkDeviceTypeNameUniqueness(updatedDevice.name)) {\r\n            nameInputRef.setValidity(true, \"The name isn't unique.\");\r\n            return false;\r\n          }\r\n\r\n          editDeviceType(updatedDevice, activeDeviceType);\r\n          changeActiveDeviceType(undefined);\r\n\r\n          return true;\r\n        } else {\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n    return true;\r\n  };\r\n\r\n  changeDevice = (id: number) => {\r\n    const { changeActiveDeviceType } = this.props.store!.newSimulationStore;\r\n\r\n    changeActiveDeviceType(id);\r\n    setTimeout(() => {\r\n      this.setDataToForm();\r\n    }, 100);\r\n  };\r\n\r\n  addDevice = () => {\r\n    const { addDeviceType } = this.props.store!.newSimulationStore;\r\n\r\n    addDeviceType();\r\n    setTimeout(() => {\r\n      this.setDataToForm();\r\n    }, 100);\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      deviceTypes,\r\n      activeDeviceType,\r\n      removeDeviceType,\r\n    } = this.props.store!.newSimulationStore;\r\n\r\n    return (\r\n      <div className=\"simulation-padding-container\">\r\n        <div className=\"simulation-flex-container\">\r\n          <div className=\"header-container\">\r\n            <div className=\"header-inside-container\">\r\n              <h2>{TranslationService.device_types}</h2>\r\n              <Tooltip\r\n                type=\"small\"\r\n                placement=\"bottom\"\r\n                title={TranslationService.device_types}\r\n                content={TranslationService.device_types_tooltip}\r\n              />\r\n            </div>\r\n            <div className=\"buttons-container\">\r\n              <div\r\n                onClick={this.addDevice}\r\n                className=\"round-button round-button-primary\"\r\n              >\r\n                <IoIosAdd />\r\n                <p>{TranslationService.add_device_types}</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"section \">\r\n            <div className=\"device-type-list\">\r\n              {deviceTypes.map((element: DeviceTypeModel, index: number) => (\r\n                <DeviceTypeListElement\r\n                  key={'' + index}\r\n                  active={activeDeviceType === index}\r\n                  onPress={() => this.changeDevice(index)}\r\n                  device={element}\r\n                />\r\n              ))}\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div\r\n          className={\r\n            'simulation-flex-container' +\r\n            (activeDeviceType === undefined\r\n              ? ' simulation-flex-container-removed'\r\n              : '')\r\n          }\r\n        >\r\n          <>\r\n            <div className=\"header-container\">\r\n              <h2>{TranslationService.device_details}</h2>\r\n              <div className=\"buttons-container\">\r\n                <div\r\n                  onClick={() => removeDeviceType(activeDeviceType)}\r\n                  className=\"round-button round-button-secondary round-button-remove\"\r\n                >\r\n                  <IoIosTrash />\r\n                </div>\r\n\r\n                <div\r\n                  onClick={this.saveData}\r\n                  className=\"round-button round-button-primary\"\r\n                >\r\n                  <IoIosSave />\r\n                  <p>{TranslationService.save}</p>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"section\">\r\n              <h3>{TranslationService.primary}</h3>\r\n              <div className=\"label-inside-container\">\r\n                <label>{TranslationService.device_icon}</label>\r\n                <Tooltip\r\n                  type=\"small\"\r\n                  placement=\"bottom\"\r\n                  title={TranslationService.device_icon}\r\n                  content={TranslationService.device_icon_tooltip}\r\n                />\r\n              </div>\r\n\r\n              <IconPicker ref={this.iconPickerRef} />\r\n\r\n              <div className=\"label-inside-container\">\r\n                <label>{TranslationService.device_name}</label>\r\n                <Tooltip\r\n                  type=\"small\"\r\n                  placement=\"bottom\"\r\n                  title={TranslationService.device_name}\r\n                  content={TranslationService.device_name_tooltip}\r\n                />\r\n              </div>\r\n              <Input ref={this.nameInputRef} white type=\"elementName\" />\r\n\r\n              <div className=\"label-inside-container\">\r\n                <label>{TranslationService.scheduling_algorithm}</label>\r\n                <Tooltip\r\n                  type=\"small\"\r\n                  placement=\"bottom\"\r\n                  title={TranslationService.scheduling_algorithm}\r\n                  content={TranslationService.device_scheduling_tooltip}\r\n                />\r\n              </div>\r\n              <Select\r\n                ref={this.schedulingAlgorithmSelectRef}\r\n                items={ScheduleTypes}\r\n              />\r\n\r\n              <div className=\"label-inside-container label-inside-container-with-bottom\">\r\n                <h3>{TranslationService.informational}</h3>\r\n                <Tooltip\r\n                  type=\"small\"\r\n                  placement=\"bottom\"\r\n                  title={TranslationService.informational}\r\n                  content={TranslationService.device_informal_tooltip}\r\n                />\r\n              </div>\r\n              <label>CPU</label>\r\n              <Select ref={this.cpuSelectRef} items={CPUs} />\r\n\r\n              <label>OS</label>\r\n              <Select ref={this.osSelectRef} items={OSes} />\r\n\r\n              <label>Libraries</label>\r\n\r\n              <Select ref={this.libsSelectRef} items={Libraries} />\r\n            </div>\r\n          </>\r\n        </div>\r\n\r\n        {deviceTypes.length === 0 && (\r\n          <div className=\"no-content-container\">\r\n            <p>{TranslationService.no_device_added_header}</p>\r\n            <p>{TranslationService.no_device_added_description}</p>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DevicesTypes;\r\n","import React from 'react';\r\n//@ts-ignore\r\nimport InputNumber from 'rc-input-number';\r\n//styles\r\nimport './NumberInput.css';\r\n\r\ninterface IProps {\r\n  initialValue?: number;\r\n}\r\n\r\ninterface IState {\r\n  disabled: boolean;\r\n  value: number;\r\n}\r\nclass NumberInput extends React.Component<IProps, IState> {\r\n  constructor(props: IProps) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      disabled: false,\r\n      value: props.initialValue || 1,\r\n    };\r\n  }\r\n\r\n  getValue = () => {\r\n    return this.state.value;\r\n  };\r\n\r\n  setValue = (value: number) => {\r\n    this.setState({ value });\r\n  };\r\n\r\n  onChange = (v: any) => {\r\n    this.setState({\r\n      value: v,\r\n    });\r\n  };\r\n\r\n  toggleDisabled = () => {\r\n    this.setState({\r\n      disabled: !this.state.disabled,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <InputNumber\r\n        step={0.1}\r\n        value={this.state.value}\r\n        onChange={this.onChange}\r\n        disabled={this.state.disabled}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default NumberInput;\r\n","import React from 'react';\r\nimport { IoIosCheckmark } from 'react-icons/io';\r\n//styles\r\nimport './Checkbox.css';\r\n//utils\r\nimport { classNames } from '../../utils/ClassNames';\r\n\r\ninterface IProps {\r\n  placeholder?: string;\r\n  initialValue?: boolean;\r\n  onChange?: (value: boolean) => void;\r\n}\r\n\r\ninterface IState {\r\n  disabled: boolean;\r\n  value: boolean;\r\n}\r\n\r\nclass Checkbox extends React.Component<IProps, IState> {\r\n  constructor(props: IProps) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      disabled: false,\r\n      value: props.initialValue || false,\r\n    };\r\n  }\r\n\r\n  getValue = () => {\r\n    return this.state.value;\r\n  };\r\n\r\n  setValue = (value: boolean) => {\r\n    this.setState({ value });\r\n  };\r\n\r\n  onChange = () => {\r\n    this.props.onChange && this.props.onChange(!this.state.value);\r\n\r\n    this.setState({\r\n      value: !this.state.value,\r\n    });\r\n  };\r\n\r\n  toggleDisabled = () => {\r\n    this.setState({\r\n      disabled: !this.state.disabled,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const classes = classNames({\r\n      checkbox: true,\r\n    });\r\n\r\n    return (\r\n      <div className=\"checkbox-container\">\r\n        <div className={classes} onClick={() => this.onChange()}>\r\n          {this.state.value && <IoIosCheckmark />}\r\n        </div>\r\n        <label className=\"checkbox-label\">{this.props.placeholder}</label>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Checkbox;\r\n","import React from 'react';\r\nimport { IoIosFastforward } from 'react-icons/io';\r\n//models\r\nimport { Medium as MediumModel } from '../models/Medium.model';\r\n//utils\r\nimport { classNames } from '../utils/ClassNames';\r\n\r\ninterface IProps {\r\n  active: boolean;\r\n  onPress: (event: any) => void;\r\n  medium: MediumModel\r\n}\r\n\r\nclass MediumListElement extends React.Component<IProps> {\r\n  render() {\r\n    const {medium, active, onPress} = this.props;\r\n\r\n    const classes = classNames({\r\n      'medium-list-element': true,\r\n      'medium-list-element-active': active,\r\n    });\r\n\r\n    return (\r\n      <div className={classes} onClick={onPress}>\r\n        <IoIosFastforward />\r\n        <div className=\"medium-text-container\">{medium.name}</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MediumListElement;","import React from 'react';\r\nimport { IoIosAdd, IoIosSave, IoIosTrash } from 'react-icons/io';\r\n//styles\r\nimport './Simulation.css';\r\n//mobx\r\nimport { inject, observer } from 'mobx-react';\r\nimport RootStore from '../../stores/RootStore';\r\n//components\r\nimport Input from '../../components/Input';\r\nimport Tooltip from '../../components/tooltip/Tooltip';\r\n//@ts-ignore\r\nimport NumberInput from '../../components/number-input/NumberInput';\r\nimport Checkbox from '../../components/checkbox/Checkbox';\r\nimport MediumListElement from '../../components/MediumListElement';\r\n//models\r\nimport {\r\n  Medium as MediumModel,\r\n  Channel as ChannelModel,\r\n} from '../../models/Medium.model';\r\nimport TranslationService from '../../services/TranslationService';\r\n\r\ninterface IProps {\r\n  store?: RootStore;\r\n}\r\n\r\ninterface ChannelRef {\r\n  inputRef: React.RefObject<Input>;\r\n  bufferRef: React.RefObject<NumberInput>;\r\n  checkboxRef: React.RefObject<Checkbox>;\r\n}\r\n\r\n@inject('store')\r\n@observer\r\nclass MediumChannels extends React.Component<IProps> {\r\n  channels: ChannelRef[] = [0, 1, 2].map((v) => ({\r\n    inputRef: React.createRef<Input>(),\r\n    bufferRef: React.createRef<NumberInput>(),\r\n    checkboxRef: React.createRef<Checkbox>(),\r\n  }));\r\n\r\n  nameInputRef = React.createRef<Input>();\r\n  refDefQuality = React.createRef<NumberInput>();\r\n  refDefListCurrent = React.createRef<NumberInput>();\r\n  refDefSenCurrent = React.createRef<NumberInput>();\r\n  refDefRecCurrent = React.createRef<NumberInput>();\r\n\r\n  setDataToForm = () => {\r\n    const { activeMedium, mediums } = this.props.store!.newSimulationStore;\r\n\r\n    if (activeMedium !== undefined) {\r\n      const medium = mediums[activeMedium];\r\n\r\n      const nameInputRef = this.nameInputRef.current;\r\n      const refDefQuality = this.refDefQuality.current;\r\n      const refDefListCurrent = this.refDefListCurrent.current;\r\n      const refDefSenCurrent = this.refDefSenCurrent.current;\r\n      const refDefRecCurrent = this.refDefRecCurrent.current;\r\n\r\n      if (\r\n        refDefQuality &&\r\n        refDefListCurrent &&\r\n        refDefSenCurrent &&\r\n        refDefRecCurrent &&\r\n        nameInputRef\r\n      ) {\r\n        refDefQuality.setValue(medium.defaultQuality);\r\n        refDefListCurrent.setValue(medium.defaultListeningCurrent);\r\n        refDefSenCurrent.setValue(medium.defaultSendingCurrent);\r\n        refDefRecCurrent.setValue(medium.defaultReceivingCurrent);\r\n        nameInputRef.setValue(medium.name);\r\n      }\r\n    }\r\n  };\r\n\r\n  saveData = () => {\r\n    const {\r\n      activeMedium,\r\n      editMedium,\r\n      changeActiveMedium,\r\n      checkMediumNameUniqueness,\r\n      checkChannelNameUniqueness,\r\n    } = this.props.store!.newSimulationStore;\r\n\r\n    if (activeMedium !== undefined) {\r\n      const nameInputRef = this.nameInputRef.current;\r\n      const refDefQuality = this.refDefQuality.current;\r\n      const refDefListCurrent = this.refDefListCurrent.current;\r\n      const refDefSenCurrent = this.refDefSenCurrent.current;\r\n      const refDefRecCurrent = this.refDefRecCurrent.current;\r\n\r\n      if (\r\n        refDefQuality &&\r\n        refDefListCurrent &&\r\n        refDefSenCurrent &&\r\n        refDefRecCurrent &&\r\n        nameInputRef\r\n      ) {\r\n        const nameValidity = nameInputRef.validate();\r\n\r\n        if (nameValidity) {\r\n          let channels: ChannelModel[] = [];\r\n          let channelsValidity = true;\r\n\r\n          this.channels.forEach((channel, index) => {\r\n            const nameRef = channel.inputRef.current;\r\n            const checkboxRef = channel.checkboxRef.current;\r\n            const bufferRef = channel.bufferRef.current;\r\n\r\n            if (nameRef && checkboxRef && bufferRef) {\r\n              if (channelsValidity) {\r\n                channelsValidity = nameRef.validate() || false;\r\n\r\n                if (!checkChannelNameUniqueness(nameRef.getValue(), index)) {\r\n                  channelsValidity = false;\r\n                  nameRef.setValidity(true, \"The name isn't unique.\");\r\n                }\r\n\r\n                const isInfinityBuffer = checkboxRef.getValue();\r\n                channels.push({\r\n                  name: nameRef.getValue(),\r\n                  buffer: isInfinityBuffer ? 'infinity' : bufferRef.getValue(),\r\n                });\r\n              }\r\n            }\r\n          });\r\n\r\n          if (!channelsValidity) {\r\n            return false;\r\n          }\r\n\r\n          const updatedMedium: MediumModel = {\r\n            name: nameInputRef.getValue(),\r\n            defaultQuality: refDefQuality.getValue(),\r\n            defaultListeningCurrent: refDefListCurrent.getValue(),\r\n            defaultSendingCurrent: refDefSenCurrent.getValue(),\r\n            defaultReceivingCurrent: refDefRecCurrent.getValue(),\r\n            channels: channels,\r\n          };\r\n\r\n          if (!checkMediumNameUniqueness(updatedMedium.name)) {\r\n            nameInputRef.setValidity(true, \"The name isn't unique.\");\r\n            return false;\r\n          }\r\n\r\n          editMedium(updatedMedium, activeMedium);\r\n          changeActiveMedium(undefined);\r\n          return true;\r\n        } else {\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n    return true;\r\n  };\r\n\r\n  changeMedium = (id: number) => {\r\n    const { changeActiveMedium } = this.props.store!.newSimulationStore;\r\n\r\n    changeActiveMedium(id);\r\n    setTimeout(() => {\r\n      this.setDataToForm();\r\n    }, 100);\r\n  };\r\n\r\n  addMedium = () => {\r\n    const { addMedium } = this.props.store!.newSimulationStore;\r\n\r\n    addMedium();\r\n    setTimeout(() => {\r\n      this.setDataToForm();\r\n    }, 100);\r\n  };\r\n\r\n  addChannel = (mediumId: number) => {\r\n    const { addChannelToMedium } = this.props.store!.newSimulationStore;\r\n\r\n    this.channels.push({\r\n      inputRef: React.createRef<Input>(),\r\n      bufferRef: React.createRef<NumberInput>(),\r\n      checkboxRef: React.createRef<Checkbox>(),\r\n    });\r\n\r\n    addChannelToMedium(mediumId);\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      mediums,\r\n      activeMedium,\r\n      removeMedium,\r\n      removeChannelFromMedium,\r\n    } = this.props.store!.newSimulationStore;\r\n\r\n    return (\r\n      <div className=\"simulation-padding-container\">\r\n        <div className=\"simulation-flex-container\">\r\n          <div className=\"header-container\">\r\n            <div className=\"header-inside-container\">\r\n              <h2>{TranslationService.mediums}</h2>\r\n              <Tooltip\r\n                type=\"small\"\r\n                placement=\"bottom\"\r\n                title={TranslationService.mediums}\r\n                content={TranslationService.mediums_tooltip}\r\n              />\r\n            </div>\r\n            <div className=\"buttons-container\">\r\n              <div\r\n                onClick={this.addMedium}\r\n                className=\"round-button round-button-primary\"\r\n              >\r\n                <IoIosAdd />\r\n                <p>{TranslationService.add_medium}</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"section \">\r\n            <div className=\"medium-list\">\r\n              {mediums.map((element: MediumModel, index: number) => (\r\n                <MediumListElement\r\n                  key={'' + index}\r\n                  active={activeMedium === index}\r\n                  onPress={() => this.changeMedium(index)}\r\n                  medium={element}\r\n                />\r\n              ))}\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div\r\n          className={\r\n            'simulation-flex-container' +\r\n            (activeMedium === undefined\r\n              ? ' simulation-flex-container-removed'\r\n              : '')\r\n          }\r\n        >\r\n          {activeMedium !== undefined && (\r\n            <>\r\n              <div className=\"header-container\">\r\n                <h2>{TranslationService.medium_details}</h2>\r\n                <div className=\"buttons-container\">\r\n                  <div\r\n                    onClick={() => removeMedium(activeMedium)}\r\n                    className=\"round-button round-button-secondary round-button-remove\"\r\n                  >\r\n                    <IoIosTrash />\r\n                  </div>\r\n\r\n                  <div\r\n                    onClick={this.saveData}\r\n                    className=\"round-button round-button-primary\"\r\n                  >\r\n                    <IoIosSave />\r\n                    <p>{TranslationService.save}</p>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"section\">\r\n                <h3>{TranslationService.primary}</h3>\r\n\r\n                <div className=\"label-inside-container\">\r\n                  <label>{TranslationService.medium_name}</label>\r\n                  <Tooltip\r\n                    type=\"small\"\r\n                    placement=\"bottom\"\r\n                    title={TranslationService.medium_name}\r\n                    content={TranslationService.medium_name_tooltip}\r\n                  />\r\n                </div>\r\n                <Input ref={this.nameInputRef} white type=\"elementName\" />\r\n\r\n                <div className=\"label-inside-container label-inside-container-with-bottom\">\r\n                  <h3>{TranslationService.constants}</h3>\r\n                  <Tooltip\r\n                    type=\"small\"\r\n                    placement=\"bottom\"\r\n                    title={TranslationService.constants}\r\n                    content={TranslationService.medium_constants_tooltip}\r\n                  />\r\n                </div>\r\n                <div className=\"medium-constants-row\">\r\n                  <div className=\"medium-constants-column\">\r\n                    <label>{TranslationService.default_quality}</label>\r\n                    <NumberInput ref={this.refDefQuality} />\r\n                  </div>\r\n                  <div className=\"medium-constants-column\">\r\n                    <label>\r\n                      {TranslationService.default_listening_current}\r\n                    </label>\r\n                    <NumberInput ref={this.refDefListCurrent} />\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"medium-constants-row\">\r\n                  <div className=\"medium-constants-column\">\r\n                    <label>{TranslationService.default_sending_current}</label>\r\n                    <NumberInput ref={this.refDefSenCurrent} />\r\n                  </div>\r\n                  <div className=\"medium-constants-column\">\r\n                    <label>\r\n                      {TranslationService.default_recieving_current}\r\n                    </label>\r\n                    <NumberInput ref={this.refDefRecCurrent} />\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"header-container\">\r\n                  <div className=\"header-inside-container\">\r\n                    <h3>{TranslationService.channels}</h3>\r\n                    <Tooltip\r\n                      type=\"small\"\r\n                      placement=\"bottom\"\r\n                      title={TranslationService.channels}\r\n                      content={TranslationService.channels_tooltip}\r\n                    />\r\n                  </div>\r\n                  <div className=\"buttons-container\">\r\n                    {mediums[activeMedium] &&\r\n                      mediums[activeMedium].channels.length < 3 && (\r\n                        <div\r\n                          onClick={() => this.addChannel(activeMedium)}\r\n                          className=\"round-button round-button-primary\"\r\n                        >\r\n                          <IoIosAdd />\r\n                          <p>{TranslationService.add_channel}</p>\r\n                        </div>\r\n                      )}\r\n                  </div>\r\n                </div>\r\n\r\n                {mediums[activeMedium] &&\r\n                  mediums[activeMedium].channels.map((channel, index) => {\r\n                    return (\r\n                      <div key={'channel' + index} className=\"section\">\r\n                        <div className=\"label-inside-container\">\r\n                          <label>{TranslationService.channel_name}</label>\r\n                          <Tooltip\r\n                            type=\"small\"\r\n                            placement=\"bottom\"\r\n                            title={TranslationService.channel_name}\r\n                            content={TranslationService.channel_name_tooltip}\r\n                          />\r\n                        </div>\r\n                        <div className=\"channel-name-container\">\r\n                          <div className=\"delete-input-conatiner\">\r\n                            <Input\r\n                              ref={this.channels[index].inputRef}\r\n                              initialValue={channel.name}\r\n                              white\r\n                              type=\"elementName\"\r\n                            />\r\n                          </div>\r\n                          <div\r\n                            onClick={() =>\r\n                              removeChannelFromMedium(activeMedium, index)\r\n                            }\r\n                            className=\"round-button round-button-secondary round-button-remove\"\r\n                          >\r\n                            <IoIosTrash />\r\n                          </div>\r\n                        </div>\r\n\r\n                        <div className=\"label-inside-container\">\r\n                          <label>{TranslationService.buffer_name}</label>\r\n                          <Tooltip\r\n                            type=\"small\"\r\n                            placement=\"bottom\"\r\n                            title={TranslationService.buffer_name}\r\n                            content={TranslationService.channel_buffer_tooltip}\r\n                          />\r\n                        </div>\r\n                        <NumberInput\r\n                          ref={this.channels[index].bufferRef}\r\n                          initialValue={\r\n                            channel.buffer === 'infinity' ? 1.0 : channel.buffer\r\n                          }\r\n                        />\r\n                        <Checkbox\r\n                          ref={this.channels[index].checkboxRef}\r\n                          placeholder={TranslationService.is_infinity}\r\n                          initialValue={channel.buffer === 'infinity'}\r\n                        />\r\n                        <div className=\"separator\" />\r\n                      </div>\r\n                    );\r\n                  })}\r\n              </div>\r\n            </>\r\n          )}\r\n        </div>\r\n\r\n        {mediums.length === 0 && (\r\n          <div className=\"no-content-container\">\r\n            <p>{TranslationService.no_medium_added_header}</p>\r\n            <p>{TranslationService.no_medium_added_description}</p>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MediumChannels;\r\n","import * as React from 'react';\r\nimport { DeviceType, Icons } from '../../models/DeviceType.model';\r\nimport { Channel } from '../../models/Medium.model';\r\n\r\nexport interface TrayItemWidgetProps {\r\n\tmodel: {deviceType: DeviceType, channels: Channel[], deviceIndexInList: number};\r\n}\r\n\r\nexport class TrayItemWidget extends React.Component<TrayItemWidgetProps> {\r\n\trender() {\r\n\r\n\t\tconst Icon = Icons.find(value => value.name === this.props.model.deviceType.icon)?.icon\r\n\r\n\t\treturn (\r\n\t\t\t<div \r\n\t\t\t\tclassName=\"diagram-tray-item tray-item\"\r\n\t\t\t\tdraggable={true}\r\n\t\t\t\tonDragStart={(event) => {\r\n\t\t\t\t\tevent.dataTransfer.setData('storm-diagram-node', JSON.stringify(this.props.model));\r\n\t\t\t\t}}>\r\n\t\t\t\t\t{Icon && <Icon />}\r\n\t\t\t\t\t<label>{this.props.model.deviceType.name}</label>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}","import * as React from 'react';\r\nimport styled from '@emotion/styled';\r\n\r\nexport interface DemoCanvasWidgetProps {\r\n\tcolor?: string;\r\n\tbackground?: string;\r\n}\r\n\r\n\r\n\texport const Container = styled.div<{ color: string; background: string }>`\r\n\t\theight: 100%;\r\n\t\tbackground-size: 50px 50px;\r\n\t\tdisplay: flex;\r\n\t\t> * {\r\n\t\t\theight: 100%;\r\n\t\t\tmin-height: 100%;\r\n\t\t\twidth: 100%;\r\n\t\t}\r\n\t\r\n\t`;\r\n\r\n\r\nexport class DemoCanvasWidget extends React.Component<DemoCanvasWidgetProps> {\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<Container\r\n\t\t\t\tbackground={this.props.background || '#f7f7f7'}\r\n\t\t\t\tcolor={this.props.color || 'rgba(255,255,255, 0.05)'}>\r\n\t\t\t\t{this.props.children}\r\n\t\t\t</Container>\r\n\t\t);\r\n\t}\r\n}","import {\r\n  DefaultPortModel,\r\n  DefaultPortModelOptions,\r\n} from '@projectstorm/react-diagrams';\r\n\r\nexport class AdvancedPortModel extends DefaultPortModel {\r\n  channelName: string;\r\n\r\n  constructor(options: DefaultPortModelOptions & { channelName: string }) {\r\n    super({ ...options });\r\n    this.channelName = options.channelName;\r\n\r\n    if (options.in) {\r\n      this.options.locked = true;\r\n    }\r\n  }\r\n\r\n  canLinkToPort = (port: AdvancedPortModel): boolean => {\r\n    return (\r\n      this.options.in !== port.getOptions().in &&\r\n      this.channelName === port.channelName\r\n    );\r\n  };\r\n}\r\n","import { NodeModel } from '@projectstorm/react-diagrams';\r\nimport { BaseModelOptions } from '@projectstorm/react-canvas-core';\r\nimport { DeviceType } from '../../../models/DeviceType.model';\r\nimport { Channel } from '../../../models/Medium.model';\r\nimport { AdvancedPortModel } from '../CustomLinkModel';\r\n\r\nexport interface NodeModelOptions extends BaseModelOptions {\r\n  deviceType: DeviceType;\r\n  channels: Channel[];\r\n}\r\n\r\nexport class CustomNodeModel extends NodeModel {\r\n  deviceType: DeviceType;\r\n  channels: Channel[];\r\n  deviceId: number;\r\n\r\n  static deviceCounter = 0;\r\n\r\n  constructor(options: NodeModelOptions) {\r\n    super({\r\n      ...options,\r\n      type: 'ts-custom-node',\r\n    });\r\n\r\n    this.deviceType = options.deviceType;\r\n    this.channels = options.channels;\r\n\r\n    CustomNodeModel.deviceCounter += 1;\r\n    this.deviceId = CustomNodeModel.deviceCounter;\r\n\r\n    this.channels &&\r\n      this.channels.forEach((v, index) => {\r\n        this.addPort(\r\n          new AdvancedPortModel({\r\n            in: true,\r\n            name: this.deviceId + '^' + v.name + '^In' + index,\r\n            channelName: v.name,\r\n          })\r\n        );\r\n        this.addPort(\r\n          new AdvancedPortModel({\r\n            in: false,\r\n            name: this.deviceId + '^' + v.name + '^Out' + index,\r\n            channelName: v.name,\r\n          })\r\n        );\r\n      });\r\n\r\n    this.serialize();\r\n  }\r\n\r\n  serialize() {\r\n    return {\r\n      ...super.serialize(),\r\n      deviceType: this.deviceType,\r\n      channels: this.channels,\r\n      deviceId: this.deviceId,\r\n    };\r\n  }\r\n\r\n  deserialize(event: any): void {\r\n    super.deserialize(event);\r\n    this.deviceType = event.data.deviceType;\r\n    this.channels = event.data.channels;\r\n    this.deviceId = event.data.deviceId;\r\n    CustomNodeModel.deviceCounter += 1;\r\n  }\r\n}\r\n","import * as React from 'react';\r\nimport './Diagrams.css';\r\nimport { Application } from './TopologyDiagram';\r\nimport { TrayItemWidget } from './TryItemWidget';\r\nimport { CanvasWidget } from '@projectstorm/react-canvas-core';\r\nimport { DemoCanvasWidget } from './DemoCanvasWidget';\r\nimport { CustomNodeModel } from './node-widget/NodeModel';\r\nimport RootStore from '../../stores/RootStore';\r\nimport { inject, observer } from 'mobx-react';\r\nimport Tooltip from '../tooltip/Tooltip';\r\nimport TranslationService from '../../services/TranslationService';\r\n\r\nexport interface BodyWidgetProps {\r\n  app: Application;\r\n  store?: RootStore;\r\n}\r\n\r\n@inject('store')\r\n@observer\r\nclass BodyWidget extends React.Component<BodyWidgetProps> {\r\n  render() {\r\n    const {\r\n      listOfAllChannels,\r\n      deviceTypes,\r\n    } = this.props.store!.newSimulationStore;\r\n\r\n    return (\r\n      <div className=\"diagram-body\">\r\n        <div className=\"diagram-content\">\r\n          <div className=\"diagram-tray\">\r\n            <div className=\"tray-header-description\">\r\n              <div className=\"header-inside-container\">\r\n                <h2>{TranslationService.topology}</h2>\r\n                <Tooltip\r\n                  type=\"small\"\r\n                  placement=\"bottom\"\r\n                  title={TranslationService.topology}\r\n                  content={TranslationService.topology_tooltip}\r\n                />\r\n              </div>\r\n\r\n              <h3>{TranslationService.available_devices}</h3>\r\n              <label>{TranslationService.drag_and_drop}</label>\r\n            </div>\r\n\r\n            {deviceTypes.map((v, index) => (\r\n              <TrayItemWidget\r\n                key={'TrayItemWidget-' + index}\r\n                model={{\r\n                  deviceType: v,\r\n                  channels: listOfAllChannels,\r\n                  deviceIndexInList: index,\r\n                }}\r\n              />\r\n            ))}\r\n          </div>\r\n          <div\r\n            className=\"diagram-layer\"\r\n            onDrop={(event) => {\r\n              const data = JSON.parse(\r\n                event.dataTransfer.getData('storm-diagram-node')\r\n              );\r\n              const node = new CustomNodeModel({\r\n                deviceType: data.deviceType,\r\n                channels: data.channels,\r\n              });\r\n              const point = this.props.app\r\n                .getDiagramEngine()\r\n                .getRelativeMousePoint(event);\r\n\r\n              node.setPosition(point);\r\n              this.props.app.getDiagramEngine().getModel().addNode(node);\r\n\r\n              this.forceUpdate();\r\n            }}\r\n            onDragOver={(event) => {\r\n              event.preventDefault();\r\n            }}\r\n          >\r\n            <DemoCanvasWidget>\r\n              <CanvasWidget engine={this.props.app.getDiagramEngine()} />\r\n            </DemoCanvasWidget>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport { BodyWidget };\r\n","import * as React from 'react';\r\nimport { DiagramEngine, PortWidget } from '@projectstorm/react-diagrams-core';\r\nimport { CustomNodeModel } from './NodeModel';\r\nimport { PortModel, PortModelGenerics } from '@projectstorm/react-diagrams';\r\nimport { Icons } from '../../../models/DeviceType.model';\r\nimport TranslationService from '../../../services/TranslationService';\r\n\r\nexport interface TSCustomNodeWidgetProps {\r\n  node: CustomNodeModel;\r\n  engine: DiagramEngine;\r\n}\r\n\r\nexport interface TSCustomNodeWidgetState {}\r\n\r\nexport class NodeWidget extends React.Component<\r\n  TSCustomNodeWidgetProps,\r\n  TSCustomNodeWidgetState\r\n> {\r\n  constructor(props: TSCustomNodeWidgetProps) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n\r\n  getPorts = () => {\r\n    const Ports = this.props.node.getPorts();\r\n    let InPorts: PortModel<PortModelGenerics>[] = [];\r\n    let OutPorts: PortModel<PortModelGenerics>[] = [];\r\n\r\n    Object.keys(Ports).forEach((v) => {\r\n      const port = Ports[v];\r\n\r\n      if (v.includes('In')) {\r\n        InPorts.push(port);\r\n      } else {\r\n        OutPorts.push(port);\r\n      }\r\n    });\r\n\r\n    return { InPorts, OutPorts };\r\n  };\r\n\r\n  removeNode = () => {\r\n    this.props.node.remove();\r\n  };\r\n\r\n  render() {\r\n    const { deviceType, deviceId } = this.props.node;\r\n    const { InPorts, OutPorts } = this.getPorts();\r\n    const channelsNames = this.props.node.channels\r\n      ? this.props.node.channels.map((v) => v.name)\r\n      : [];\r\n    const Icon = Icons.find((value) => value.name === deviceType?.icon)?.icon;\r\n\r\n    return (\r\n      <div className=\"custom-node\">\r\n        <div className=\"node-header\">\r\n          <div className=\"node-header-inside\">\r\n            {Icon && <Icon />}\r\n            <div className=\"node-header-text\">\r\n              <label>\r\n                {TranslationService.device_instance} #{deviceId}\r\n              </label>\r\n              <label>{deviceType?.name}</label>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"node-ports-container\">\r\n          <div className=\"ports in-ports\">\r\n            {InPorts.map((v, index) => (\r\n              <PortWidget\r\n                key={'in-port-' + index}\r\n                engine={this.props.engine}\r\n                port={v}\r\n              >\r\n                <div className=\"node-port node-port-in\">\r\n                  <label>{TranslationService.in}</label>\r\n                </div>\r\n              </PortWidget>\r\n            ))}\r\n          </div>\r\n\r\n          <div className=\"ports ports-names\">\r\n            {channelsNames.map((v, index) => (\r\n              <label key={'name-port-' + index}>{v}</label>\r\n            ))}\r\n          </div>\r\n\r\n          <div className=\"ports out-ports\">\r\n            {OutPorts.map((v, index) => (\r\n              <PortWidget\r\n                key={'out-port-' + index}\r\n                engine={this.props.engine}\r\n                port={v}\r\n              >\r\n                <div className=\"node-port node-port-out\">\r\n                  <label>{TranslationService.out}</label>\r\n                </div>\r\n              </PortWidget>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import * as React from 'react';\r\nimport { CustomNodeModel } from './NodeModel';\r\nimport { NodeWidget } from './NodeWidget';\r\nimport { AbstractReactFactory } from '@projectstorm/react-canvas-core';\r\nimport { DiagramEngine } from '@projectstorm/react-diagrams-core';\r\n\r\nexport class NodeFactory extends AbstractReactFactory<CustomNodeModel, DiagramEngine> {\r\n\tconstructor() {\r\n\t\tsuper('ts-custom-node');\r\n\t}\r\n\r\n\tgenerateModel(initialConfig: any) {\r\n\t\treturn new CustomNodeModel(initialConfig);\r\n\t}\r\n\r\n\tgenerateReactWidget(event: any): JSX.Element {\r\n\t\treturn <NodeWidget engine={this.engine as DiagramEngine} node={event.model} />;\r\n\t}\r\n}","import React from 'react';\r\n//styles\r\nimport './Simulation.css';\r\n//mobx\r\nimport { inject, observer } from 'mobx-react';\r\nimport RootStore from '../../stores/RootStore';\r\n//components\r\nimport { BodyWidget } from '../../components/topology-diagram/BodyWidget';\r\nimport { Application } from '../../components/topology-diagram/TopologyDiagram';\r\nimport { SimulationTemplate } from '../../models/SimulationTemplate.model';\r\n\r\ninterface IProps {\r\n  store?: RootStore;\r\n  defaultModel?: SimulationTemplate;\r\n}\r\n\r\nlet app = new Application();\r\n\r\n@inject('store')\r\n@observer\r\nclass Topology extends React.Component<IProps> {\r\n  componentDidMount = () => {\r\n    this.props.defaultModel\r\n      ? this.setNewModel(this.props.defaultModel)\r\n      : app.newModel();\r\n  };\r\n\r\n  serialize = () => {\r\n    const { changeTopologyElements } = this.props.store!.newSimulationStore;\r\n    const serialized = app.prepareDiagramToAnalyse();\r\n    changeTopologyElements(serialized);\r\n  };\r\n\r\n  setNewModel = (model: SimulationTemplate) => {\r\n    app.deserializeDiagram(model.topologyDiagrams);\r\n  };\r\n\r\n  resetApp = () => {};\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"simulation-padding-container\">\r\n        <BodyWidget app={app} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Topology;\r\n","import createEngine, {\r\n  DefaultLinkModel,\r\n  DiagramModel,\r\n  DiagramModelGenerics,\r\n  DiagramEngine,\r\n  NodeModel,\r\n} from '@projectstorm/react-diagrams';\r\nimport { CustomNodeModel } from './node-widget/NodeModel';\r\nimport { NodeFactory } from './node-widget/NodeFactory';\r\nimport { TopologyElement } from '../../models/TopologyElement.model';\r\n\r\nexport class Application {\r\n  engine = createEngine();\r\n  model: DiagramModel<DiagramModelGenerics>;\r\n\r\n  constructor() {\r\n    this.engine.getNodeFactories().registerFactory(new NodeFactory());\r\n    CustomNodeModel.deviceCounter = 0;\r\n    this.model = new DiagramModel();\r\n    this.engine.setModel(this.model);\r\n  }\r\n\r\n  public newModel = () => {\r\n    this.model = new DiagramModel();\r\n    CustomNodeModel.deviceCounter = 0;\r\n    this.engine.setModel(this.model);\r\n  };\r\n\r\n  public serializeDiagram = () => {\r\n    this.model.getNodeLayers();\r\n  };\r\n\r\n  public deserializeDiagram = (serializedModel: string) => {\r\n    this.model.deserializeModel(JSON.parse(serializedModel), this.engine);\r\n    this.engine.setModel(this.model);\r\n  };\r\n\r\n  public prepareDiagramToAnalyse = (): TopologyElement[] => {\r\n    const serializedDiagram = this.model.getNodeLayers()[0];\r\n    const models = serializedDiagram.getModels();\r\n    const links = serializedDiagram.getParent().getLayers()[0].getModels();\r\n\r\n    let preparedDiagram: TopologyElement[] = [];\r\n\r\n    Object.keys(models).forEach((v) => {\r\n      const model = models[v] as CustomNodeModel;\r\n\r\n      preparedDiagram.push({\r\n        deviceId: model.deviceId,\r\n        deviceType: model.deviceType,\r\n        connectedOutDevicesIds: [],\r\n      });\r\n    });\r\n\r\n    Object.keys(links).forEach((v) => {\r\n      const link = links[v] as DefaultLinkModel;\r\n\r\n      const sourcePort = link.getSourcePort().getOptions().name.split('^');\r\n      const targetPort = link.getTargetPort().getOptions().name.split('^');\r\n\r\n      const sourceNode = preparedDiagram.find(\r\n        (v) => v.deviceId === parseInt(sourcePort[0])\r\n      );\r\n\r\n      if (sourceNode) {\r\n        sourceNode.connectedOutDevicesIds.push({\r\n          deviceId: parseInt(targetPort[0]),\r\n          channelName: targetPort[1],\r\n        });\r\n      }\r\n    });\r\n\r\n    return preparedDiagram;\r\n  };\r\n\r\n  public getActiveDiagram = (): DiagramModel<DiagramModelGenerics> => {\r\n    return this.model;\r\n  };\r\n\r\n  public getDiagramEngine = (): DiagramEngine => {\r\n    return this.engine;\r\n  };\r\n}\r\n","import React from 'react';\r\nimport { IoIosCheckmarkCircle } from 'react-icons/io';\r\n//models\r\nimport { Version } from '../models/Version.model';\r\n//utils\r\nimport { classNames } from '../utils/ClassNames';\r\n\r\ninterface IProps {\r\n  active: boolean;\r\n  onPress: (event: any) => void;\r\n  version: Version\r\n}\r\n\r\nclass VersionListElement extends React.Component<IProps> {\r\n  render() {\r\n    const {version, active, onPress} = this.props;\r\n\r\n    const classes = classNames({\r\n      'medium-list-element': true,\r\n      'medium-list-element-active': active,\r\n    });\r\n\r\n    return (\r\n      <div className={classes} onClick={onPress}>\r\n        <IoIosCheckmarkCircle />\r\n        <div className=\"medium-text-container\">{version.name}</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default VersionListElement;","import React from 'react';\r\n//styles\r\nimport './Process.css';\r\nimport Input from '../Input';\r\nimport { IoIosTrash } from 'react-icons/io';\r\nimport Select, { SelectValue } from '../select/Select';\r\nimport NumberInput from '../number-input/NumberInput';\r\nimport { Process as ProcessModel } from '../../models/Version.model';\r\nimport { observer, inject } from 'mobx-react';\r\nimport RootStore from '../../stores/RootStore';\r\nimport _ from 'lodash';\r\nimport Checkbox from '../checkbox/Checkbox';\r\nimport TranslationService from '../../services/TranslationService';\r\nimport Tooltip from '../tooltip/Tooltip';\r\n\r\ninterface IProps {\r\n  process: ProcessModel;\r\n  removeProcess?: () => void;\r\n  store?: RootStore;\r\n}\r\n\r\ninterface IState {\r\n  channelsList: SelectValue[];\r\n  sendDevicesList: SelectValue[];\r\n  deviceId: number | undefined;\r\n  isOutProcess: boolean;\r\n  isInProcess: boolean;\r\n}\r\n\r\n@inject('store')\r\n@observer\r\nclass Process extends React.Component<IProps, IState> {\r\n  nameInputRef = React.createRef<Input>();\r\n  deviceInstanceSelectRef = React.createRef<Select>();\r\n  executionTimeInputRef = React.createRef<NumberInput>();\r\n  processTypeSelectRef = React.createRef<Select>();\r\n  inChannelSelectRef = React.createRef<Select>();\r\n  outChannelSelectRef = React.createRef<Select>();\r\n  senderDeviceSelectRef = React.createRef<Select>();\r\n  outMessageSizeRef = React.createRef<NumberInput>();\r\n\r\n  infinityCheckboxRef = React.createRef<Checkbox>();\r\n  isOutProcessCheckboxRef = React.createRef<Checkbox>();\r\n  isInProcessCheckboxRef = React.createRef<Checkbox>();\r\n\r\n  constructor(props: IProps) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      isOutProcess: false,\r\n      isInProcess: false,\r\n      deviceId: undefined,\r\n      channelsList: [],\r\n      sendDevicesList: [],\r\n    };\r\n  }\r\n\r\n  validate = (index?: number) => {\r\n    const {\r\n      checkProcessNameUniqueness,\r\n    } = this.props.store?.newSimulationStore!;\r\n    const validation = [this.nameInputRef.current?.validate()];\r\n\r\n    if (index) {\r\n      if (\r\n        !checkProcessNameUniqueness(\r\n          this.nameInputRef.current?.getValue()!,\r\n          index\r\n        )\r\n      ) {\r\n        this.nameInputRef.current?.setValidity(true, \"The name isn't unique.\");\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return validation.findIndex((v) => !v) === -1;\r\n  };\r\n\r\n  getValue = () => {\r\n    const process: ProcessModel = {\r\n      name: this.nameInputRef.current?.getValue() || '',\r\n      time: this.executionTimeInputRef.current?.getValue() || 1.0,\r\n      deviceId: this.deviceInstanceSelectRef.current?.getValue()?.value,\r\n      deviceToSendId: this.senderDeviceSelectRef.current?.getValue()?.value,\r\n      inChannel: this.inChannelSelectRef.current?.getValue()?.value,\r\n      outChannel: this.outChannelSelectRef.current?.getValue()?.value,\r\n      isInfinity: this.infinityCheckboxRef.current?.getValue(),\r\n      outMessageSize: this.outMessageSizeRef.current?.getValue() || 1,\r\n    };\r\n\r\n    return process;\r\n  };\r\n\r\n  setValue = (process: ProcessModel) => {\r\n    this.nameInputRef.current?.setValue(process.name);\r\n    this.executionTimeInputRef.current?.setValue(process.time);\r\n    this.deviceInstanceSelectRef.current?.setValue(process.deviceId);\r\n    this.infinityCheckboxRef.current?.setValue(process.isInfinity || false);\r\n\r\n    this.setState(\r\n      {\r\n        isInProcess: !!process.inChannel,\r\n        isOutProcess: !!process.deviceToSendId && !!process.outChannel,\r\n      },\r\n      () => {\r\n        this.isInProcessCheckboxRef.current?.setValue(this.state.isInProcess);\r\n        this.isOutProcessCheckboxRef.current?.setValue(this.state.isOutProcess);\r\n        this.inChannelSelectRef.current?.setValue(process.inChannel);\r\n        this.senderDeviceSelectRef.current?.setValue(process.deviceToSendId);\r\n        this.outChannelSelectRef.current?.setValue(process.outChannel);\r\n        this.outMessageSizeRef.current?.setValue(process.outMessageSize!);\r\n      }\r\n    );\r\n  };\r\n\r\n  onChangeInChannelVisibility = (value: boolean) => {\r\n    this.setState({ isInProcess: value });\r\n  };\r\n\r\n  onChangeOutChannelVisibility = (value: boolean) => {\r\n    this.setState({ isOutProcess: value });\r\n  };\r\n\r\n  getChannelsList = () => {\r\n    const { mediums } = this.props.store!.newSimulationStore;\r\n\r\n    let channels: string[] = [];\r\n    mediums.forEach((v) => {\r\n      v.channels.forEach((w) => channels.push(w.name));\r\n    });\r\n\r\n    return channels.map((v) => ({\r\n      label: v,\r\n      value: v,\r\n    }));\r\n  };\r\n\r\n  onChangeChannel = (value: string) => {\r\n    const { topologyElements } = this.props.store!.newSimulationStore;\r\n\r\n    const sendDevices = topologyElements\r\n      .find((v) => v.deviceId === this.state.deviceId)\r\n      ?.connectedOutDevicesIds.filter((v) => v.channelName === value)\r\n      .map((v) => v.deviceId);\r\n\r\n    this.setState({\r\n      sendDevicesList: _.uniq(sendDevices).map((v) => ({\r\n        label: 'Device instance #' + v,\r\n        value: v.toString(),\r\n      })),\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { process, removeProcess, store } = this.props;\r\n    const { isInProcess, isOutProcess } = this.state;\r\n    const { topologyElements } = store!.newSimulationStore;\r\n\r\n    const channelsList = this.getChannelsList();\r\n\r\n    const devicesInstances = topologyElements.map((v) => ({\r\n      label: 'Device instance #' + v.deviceId,\r\n      value: v.deviceId,\r\n    }));\r\n\r\n    return (\r\n      <div className=\"section\">\r\n        <div className=\"label-inside-container\">\r\n          <label>{TranslationService.process_name}</label>\r\n          <Tooltip\r\n            type=\"small\"\r\n            placement=\"bottom\"\r\n            title={TranslationService.process_name}\r\n            content={TranslationService.process_name_tooltip}\r\n          />\r\n        </div>\r\n        <div className=\"channel-name-container\">\r\n          <div className=\"delete-input-conatiner\">\r\n            <Input\r\n              ref={this.nameInputRef}\r\n              initialValue={process.name}\r\n              white\r\n              type=\"elementName\"\r\n            />\r\n          </div>\r\n          <div\r\n            onClick={removeProcess}\r\n            className=\"round-button round-button-secondary round-button-remove\"\r\n          >\r\n            <IoIosTrash />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"medium-constants-row process-info-row\">\r\n          <div className=\"medium-constants-column\">\r\n            <div className=\"label-inside-container\">\r\n              <label>{TranslationService.device_instance}</label>\r\n              <Tooltip\r\n                type=\"small\"\r\n                placement=\"bottom\"\r\n                title={TranslationService.device_instance}\r\n                content={TranslationService.process_device_instance_tooltip}\r\n              />\r\n            </div>\r\n            <Select\r\n              ref={this.deviceInstanceSelectRef}\r\n              items={devicesInstances}\r\n            />\r\n          </div>\r\n          <div className=\"medium-constants-column\">\r\n            <div className=\"label-inside-container\">\r\n              <label>{TranslationService.execution_time}</label>\r\n              <Tooltip\r\n                type=\"small\"\r\n                placement=\"bottom\"\r\n                title={TranslationService.execution_time}\r\n                content={TranslationService.process_execution_time_tooltip}\r\n              />\r\n            </div>\r\n            <NumberInput ref={this.executionTimeInputRef} />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"label-inside-container\">\r\n          <Checkbox\r\n            ref={this.infinityCheckboxRef}\r\n            placeholder={TranslationService.infinity_process}\r\n          />\r\n          <Tooltip\r\n            type=\"small\"\r\n            placement=\"bottom\"\r\n            title={TranslationService.is_infinity}\r\n            content={TranslationService.process_infinity_tooltip}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"label-inside-container\">\r\n          <Checkbox\r\n            ref={this.isInProcessCheckboxRef}\r\n            placeholder={TranslationService.process_with_recieve}\r\n            onChange={this.onChangeInChannelVisibility}\r\n          />\r\n          <Tooltip\r\n            type=\"small\"\r\n            placement=\"bottom\"\r\n            title={TranslationService.process_with_recieve}\r\n            content={TranslationService.process_recieve_tooltip}\r\n          />\r\n        </div>\r\n\r\n        {isInProcess && (\r\n          <>\r\n            <label>{TranslationService.recieve_from_channel}</label>\r\n            <Select\r\n              items={channelsList}\r\n              ref={this.inChannelSelectRef}\r\n              onChange={this.onChangeChannel}\r\n            />\r\n          </>\r\n        )}\r\n\r\n        <div className=\"label-inside-container\">\r\n          <Checkbox\r\n            ref={this.isOutProcessCheckboxRef}\r\n            placeholder={TranslationService.process_with_send}\r\n            onChange={this.onChangeOutChannelVisibility}\r\n          />\r\n          <Tooltip\r\n            type=\"small\"\r\n            placement=\"bottom\"\r\n            title={TranslationService.process_with_send}\r\n            content={TranslationService.process_send_tooltip}\r\n          />\r\n        </div>\r\n\r\n        {isOutProcess && (\r\n          <>\r\n            <label>{TranslationService.send_channel}</label>\r\n            <Select\r\n              items={channelsList}\r\n              ref={this.outChannelSelectRef}\r\n              onChange={this.onChangeChannel}\r\n            />\r\n            <label>{TranslationService.device_to_sent}</label>\r\n            <Select items={devicesInstances} ref={this.senderDeviceSelectRef} />\r\n            <label>{TranslationService.size_to_sent}</label>\r\n            <NumberInput ref={this.outMessageSizeRef} />\r\n          </>\r\n        )}\r\n        <div className=\"separator\" />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Process;\r\n","import React from 'react';\r\nimport { IoIosAdd, IoIosSave, IoIosTrash } from 'react-icons/io';\r\n//styles\r\nimport './Simulation.css';\r\n//mobx\r\nimport { inject, observer } from 'mobx-react';\r\nimport RootStore from '../../stores/RootStore';\r\n//components\r\nimport Input from '../../components/Input'; //models\r\nimport { Version } from '../../models/Version.model';\r\nimport VersionListElement from '../../components/VersionListElement';\r\nimport Process from '../../components/process/Process';\r\nimport { Process as ProcessModel } from '../../models/Version.model';\r\nimport Tooltip from '../../components/tooltip/Tooltip';\r\nimport TranslationService from '../../services/TranslationService';\r\n\r\ninterface IProps {\r\n  store?: RootStore;\r\n}\r\n\r\n@inject('store')\r\n@observer\r\nclass Versions extends React.Component<IProps> {\r\n  nameInputRef = React.createRef<Input>();\r\n  processesRefs: React.RefObject<Process>[] = [];\r\n\r\n  setDataToForm = () => {\r\n    const { activeVersion, versions } = this.props.store!.newSimulationStore;\r\n\r\n    if (activeVersion !== undefined) {\r\n      const version = versions[activeVersion];\r\n\r\n      this.nameInputRef.current?.setValue(version.name);\r\n\r\n      version.processes.forEach((v, index) => {\r\n        this.processesRefs[index].current?.setValue(v);\r\n      });\r\n    }\r\n  };\r\n\r\n  saveData = () => {\r\n    const {\r\n      activeVersion,\r\n      editVersion,\r\n      changeActiveVersion,\r\n      checkVersionNameUniqueness,\r\n    } = this.props.store!.newSimulationStore;\r\n\r\n    if (activeVersion !== undefined) {\r\n      const validations = [\r\n        this.nameInputRef.current?.validate(),\r\n        ...this.processesRefs.map((v, index) => v.current?.validate(index)),\r\n      ];\r\n\r\n      if (validations.findIndex((v) => !v) === -1) {\r\n        let processes: ProcessModel[] = [];\r\n\r\n        this.processesRefs.forEach((v) => {\r\n          v.current && processes.push(v.current.getValue());\r\n        });\r\n\r\n        const updatedVersion: Version = {\r\n          name: this.nameInputRef.current?.getValue() || '',\r\n          processes,\r\n        };\r\n\r\n        if (!checkVersionNameUniqueness(updatedVersion.name)) {\r\n          this.nameInputRef.current?.setValidity(\r\n            true,\r\n            TranslationService.unique_name\r\n          );\r\n          return false;\r\n        }\r\n\r\n        editVersion(updatedVersion, activeVersion);\r\n        changeActiveVersion(undefined);\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  };\r\n\r\n  changeVersion = (id: number) => {\r\n    const {\r\n      versions,\r\n      changeActiveVersion,\r\n    } = this.props.store!.newSimulationStore;\r\n\r\n    this.processesRefs = [];\r\n    this.processesRefs = versions[id].processes.map((v) =>\r\n      React.createRef<Process>()\r\n    );\r\n\r\n    changeActiveVersion(id);\r\n    setTimeout(() => {\r\n      this.setDataToForm();\r\n    }, 100);\r\n  };\r\n\r\n  addVersion = () => {\r\n    const addVersionFunc = this.props.store!.newSimulationStore.addVersion;\r\n    const { versions } = this.props.store!.newSimulationStore;\r\n\r\n    addVersionFunc();\r\n    setTimeout(() => {\r\n      this.processesRefs = versions[versions.length - 1].processes.map((v) =>\r\n        React.createRef<Process>()\r\n      );\r\n      this.setDataToForm();\r\n    }, 100);\r\n  };\r\n\r\n  addProcessToVersion = () => {\r\n    const {\r\n      addProcessToVersion,\r\n      activeVersion,\r\n    } = this.props.store!.newSimulationStore;\r\n\r\n    if (activeVersion !== undefined) {\r\n      this.processesRefs.push(React.createRef<Process>());\r\n      addProcessToVersion(activeVersion);\r\n    }\r\n  };\r\n\r\n  removeProcessFromVersion = (index: number) => {\r\n    const {\r\n      activeVersion,\r\n      removeProcessFromVersion,\r\n    } = this.props.store!.newSimulationStore;\r\n\r\n    if (activeVersion !== undefined) {\r\n      removeProcessFromVersion(activeVersion, index);\r\n      setTimeout(() => {\r\n        this.processesRefs.splice(index, 1);\r\n      }, 100);\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      versions,\r\n      activeVersion,\r\n      removeVersion,\r\n    } = this.props.store!.newSimulationStore;\r\n\r\n    return (\r\n      <div className=\"simulation-padding-container\">\r\n        <div className=\"simulation-flex-container\">\r\n          <div className=\"header-container\">\r\n            <div className=\"header-inside-container\">\r\n              <h2>{TranslationService.versions}</h2>\r\n              <Tooltip\r\n                type=\"small\"\r\n                placement=\"bottom\"\r\n                title={TranslationService.versions_and_proccesses}\r\n                content={TranslationService.versions_and_proccesses_tooltip}\r\n              />\r\n            </div>\r\n            <div className=\"buttons-container\">\r\n              <div\r\n                onClick={this.addVersion}\r\n                className=\"round-button round-button-primary\"\r\n              >\r\n                <IoIosAdd />\r\n                <p>{TranslationService.add_version}</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"section \">\r\n            <div className=\"medium-list\">\r\n              {versions.map((element: Version, index: number) => (\r\n                <VersionListElement\r\n                  key={'' + index}\r\n                  active={activeVersion === index}\r\n                  onPress={() => this.changeVersion(index)}\r\n                  version={element}\r\n                />\r\n              ))}\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div\r\n          className={\r\n            'simulation-flex-container' +\r\n            (activeVersion === undefined\r\n              ? ' simulation-flex-container-removed'\r\n              : '')\r\n          }\r\n        >\r\n          {activeVersion !== undefined && (\r\n            <>\r\n              <div className=\"header-container\">\r\n                <h2>{TranslationService.version_details}</h2>\r\n                <div className=\"buttons-container\">\r\n                  <div\r\n                    onClick={() => removeVersion(activeVersion)}\r\n                    className=\"round-button round-button-secondary round-button-remove\"\r\n                  >\r\n                    <IoIosTrash />\r\n                  </div>\r\n\r\n                  <div\r\n                    onClick={this.saveData}\r\n                    className=\"round-button round-button-primary\"\r\n                  >\r\n                    <IoIosSave />\r\n                    <p>{TranslationService.save}</p>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"section\">\r\n                <div className=\"label-inside-container\">\r\n                  <label>{TranslationService.version_name}</label>\r\n                  <Tooltip\r\n                    type=\"small\"\r\n                    placement=\"bottom\"\r\n                    title={TranslationService.version_name}\r\n                    content={TranslationService.version_name_tooltip}\r\n                  />\r\n                </div>\r\n                <Input ref={this.nameInputRef} white type=\"elementName\" />\r\n\r\n                <div className=\"header-container\">\r\n                  <h3>{TranslationService.processes}</h3>\r\n                  <div className=\"buttons-container\">\r\n                    <div\r\n                      onClick={this.addProcessToVersion}\r\n                      className=\"round-button round-button-primary\"\r\n                    >\r\n                      <IoIosAdd />\r\n                      <p>{TranslationService.add_process}</p>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                {versions[activeVersion] &&\r\n                  versions[activeVersion].processes.map((process, index) => {\r\n                    return (\r\n                      <Process\r\n                        key={'channel' + index}\r\n                        ref={this.processesRefs[index]}\r\n                        process={process}\r\n                        removeProcess={() =>\r\n                          this.removeProcessFromVersion(index)\r\n                        }\r\n                      />\r\n                    );\r\n                  })}\r\n              </div>\r\n            </>\r\n          )}\r\n        </div>\r\n\r\n        {versions.length === 0 && (\r\n          <div className=\"no-content-container\">\r\n            <p>{TranslationService.no_version_added_header}</p>\r\n            <p>{TranslationService.no_version_added_description}</p>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Versions;\r\n","import React from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\n//styles\r\nimport './Simulation.css';\r\n//mobx\r\nimport { inject, observer } from 'mobx-react';\r\nimport RootStore from '../../stores/RootStore';\r\n//components\r\nimport { IoIosPlay, IoIosThumbsDown } from 'react-icons/io';\r\nimport { classNames } from '../../utils/ClassNames';\r\n//@ts-ignore\r\nimport Loader from 'react-loader-spinner';\r\nimport TranslationService from '../../services/TranslationService';\r\ninterface IProps {\r\n  store?: RootStore;\r\n  history: any;\r\n  location: any;\r\n  match: any;\r\n}\r\n\r\n@inject('store')\r\n@observer\r\nclass Start extends React.Component<IProps> {\r\n  state = {\r\n    simulationStarted: false,\r\n    simulationCompleted: false,\r\n    simulationError: false,\r\n  };\r\n\r\n  startSimulation = () => {\r\n    const model = this.props.store!.newSimulationStore.getAllModels();\r\n    this.setState(\r\n      { simulationStarted: true, simulationError: false },\r\n      async () => {\r\n        try {\r\n          const rawResponse = await fetch('/api/simulations/', {\r\n            method: 'POST',\r\n            headers: {\r\n              Accept: 'application/json',\r\n              'Content-Type': 'application/json',\r\n              Authorization: 'Bearer ' + localStorage.getItem('token'),\r\n            },\r\n            body: JSON.stringify({ parsed: JSON.stringify(model) }),\r\n          });\r\n\r\n          if (rawResponse.status === 401) {\r\n            this.props.store?.userStore.logout();\r\n            setTimeout(() => {\r\n              window.location.reload();\r\n            }, 100);\r\n            return;\r\n          }\r\n\r\n          const content = await rawResponse.json();\r\n\r\n          if (content.success) {\r\n            this.setState({\r\n              simulationCompleted: true,\r\n            });\r\n\r\n            this.props.history.push('/details/' + content.simulationId);\r\n          } else {\r\n            this.setState({ simulationError: true });\r\n          }\r\n        } catch (error) {\r\n          // console.log(error);\r\n          this.setState({ simulationError: true });\r\n        }\r\n      }\r\n    );\r\n  };\r\n\r\n  render() {\r\n    const classes = classNames({\r\n      'start-button': true,\r\n      'start-button-hide': this.state.simulationStarted,\r\n    });\r\n\r\n    return (\r\n      <div className=\"simulation-padding-container\">\r\n        <div className=\"simulation-flex-container\">\r\n          <div className=\"header-container\">\r\n            <h2>Start</h2>\r\n            <div className=\"buttons-container\"></div>\r\n          </div>\r\n        </div>\r\n\r\n        {!this.state.simulationError ? (\r\n          <div className=\"no-content-container\" onClick={this.startSimulation}>\r\n            {this.state.simulationStarted ? (\r\n              <Loader type=\"Circles\" color=\"#264766\" height={60} width={60} />\r\n            ) : (\r\n              <div className={classes}>\r\n                <IoIosPlay />\r\n              </div>\r\n            )}\r\n\r\n            {!this.state.simulationStarted ? (\r\n              <>\r\n                <p>{TranslationService.start_simulation}</p>\r\n                <p>{TranslationService.start_simulation_description}</p>\r\n              </>\r\n            ) : (\r\n              <>\r\n                <p>{TranslationService.starting}</p>\r\n                <p></p>\r\n              </>\r\n            )}\r\n          </div>\r\n        ) : (\r\n          <div className=\"no-content-container simulation-error-container\">\r\n            <IoIosThumbsDown />\r\n            <p>{TranslationService.something_error}</p>\r\n            <p onClick={this.startSimulation}>{TranslationService.try_again}</p>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(Start);\r\n","import React from 'react';\r\n//styles\r\nimport './Modal.css';\r\n\r\ninterface IProps {\r\n  text: string;\r\n  header: string;\r\n  onPressLeft: () => void;\r\n  onPressRight?: () => void;\r\n  leftButtonLabel: string;\r\n  rightButtonLabel?: string;\r\n}\r\n\r\nconst Modal = (props: IProps) => {\r\n  return (\r\n    <div className=\"modal-container\">\r\n      <div className=\"modal-content\">\r\n        <div className=\"modal-content-header\">\r\n          <h2>{props.header}</h2>\r\n        </div>\r\n        <div className=\"modal-content-inside\">\r\n          <p>{props.text}</p>\r\n          <div className=\"modal-button-container\">\r\n            <div className=\"button modal-button\" onClick={props.onPressLeft}>\r\n              {props.leftButtonLabel}\r\n            </div>\r\n            {props.rightButtonLabel && (\r\n              <div className=\"button modal-button\" onClick={props.onPressRight}>\r\n                {props.rightButtonLabel}\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Modal;\r\n","import Simulation1 from './templates/Simulation1';\r\nimport Simulation2 from './templates/Simulation2';\r\nimport Simulation3 from './templates/Simulation3';\r\n\r\nexport interface SimulationTemplate {\r\n  title: string;\r\n  description: string;\r\n  deviceTypes: string;\r\n  mediums: string;\r\n  topology: string;\r\n  topologyDiagrams: string;\r\n  versions: string;\r\n}\r\n\r\nexport const SimulationTemplatesList: SimulationTemplate[] = [\r\n  Simulation1,\r\n  Simulation2,\r\n  Simulation3,\r\n];\r\n","import { SimulationTemplate } from '../SimulationTemplate.model';\r\n\r\nconst deviceTypes = `[{\"icon\":\"IoIosDesktop\",\"name\":\"PC1\",\"cpu\":\"Pentium Dual-Core T4200 2GHz\",\"os\":\"Debian 8 64-bit\",\"libraries\":\"N/A\",\"schedulingAlgorithm\":\"fifo\"},{\"icon\":\"IoIosLaptop\",\"name\":\"Notebook\",\"cpu\":\"Pentium Dual-Core T4200 2GHz\",\"os\":\"Windows 10 Pro 64-bit\",\"libraries\":\"N/A\",\"schedulingAlgorithm\":\"fifo\"}]`;\r\nconst mediums = `[{\"name\":\"Medium\",\"defaultQuality\":1,\"defaultListeningCurrent\":1,\"defaultSendingCurrent\":1,\"defaultReceivingCurrent\":1,\"channels\":[{\"name\":\"Channel\",\"buffer\":1024}]}]`;\r\nconst topology = `[{\"deviceId\":1,\"deviceType\":{\"icon\":\"IoIosDesktop\",\"name\":\"PC1\",\"cpu\":\"Pentium Dual-Core T4200 2GHz\",\"os\":\"Debian 8 64-bit\",\"libraries\":\"N/A\",\"schedulingAlgorithm\":\"fifo\"},\"connectedOutDevicesIds\":[{\"deviceId\":2,\"channelName\":\"Channel\"}]},{\"deviceId\":2,\"deviceType\":{\"icon\":\"IoIosLaptop\",\"name\":\"Notebook\",\"cpu\":\"Pentium Dual-Core T4200 2GHz\",\"os\":\"Windows 10 Pro 64-bit\",\"libraries\":\"N/A\",\"schedulingAlgorithm\":\"fifo\"},\"connectedOutDevicesIds\":[]}]`;\r\nconst topologyDiagrams = `{\"id\":\"11f7aacc-0be8-4225-a433-93bd9ebde1a9\",\"offsetX\":0,\"offsetY\":0,\"zoom\":100,\"gridSize\":0,\"layers\":[{\"id\":\"b48b2320-a7e3-4c7d-830f-c0a1d7f50682\",\"type\":\"diagram-links\",\"isSvg\":true,\"transformed\":true,\"models\":{\"7152b2ba-a0ea-4b4c-9d99-4efd9169720e\":{\"id\":\"7152b2ba-a0ea-4b4c-9d99-4efd9169720e\",\"type\":\"default\",\"selected\":true,\"source\":\"187b2909-5cbb-450a-88f2-5da0c01ac41c\",\"sourcePort\":\"2d6b0a81-73a0-4923-8439-ecf9d7f5b542\",\"target\":\"7985ef85-d1e0-49e1-9867-f54605655972\",\"targetPort\":\"9c7b3220-545c-4d8c-a9a7-4a968db5c74e\",\"points\":[{\"id\":\"2735bd23-8274-41ff-9780-eee2ab0f2547\",\"type\":\"point\",\"x\":365.99432373046875,\"y\":265.00000286102295},{\"id\":\"897b6596-d9f0-4660-9acf-7d71e0f17975\",\"type\":\"point\",\"x\":666.9885864257812,\"y\":290.00000286102295}],\"labels\":[],\"width\":3,\"color\":\"gray\",\"curvyness\":50,\"selectedColor\":\"rgb(0,192,255)\"}}},{\"id\":\"69d39bc4-ea97-41c9-8f21-8b8599d4ae48\",\"type\":\"diagram-nodes\",\"isSvg\":false,\"transformed\":true,\"models\":{\"187b2909-5cbb-450a-88f2-5da0c01ac41c\":{\"id\":\"187b2909-5cbb-450a-88f2-5da0c01ac41c\",\"type\":\"ts-custom-node\",\"x\":206,\"y\":195.00000381469727,\"ports\":[{\"id\":\"c97fe917-6290-47b4-a616-3ca87f26e4b3\",\"locked\":true,\"type\":\"default\",\"x\":205.99429321289062,\"y\":250.00000381469727,\"name\":\"1^Channel^In0\",\"alignment\":\"left\",\"parentNode\":\"187b2909-5cbb-450a-88f2-5da0c01ac41c\",\"links\":[],\"in\":true,\"label\":\"1^Channel^In0\"},{\"id\":\"2d6b0a81-73a0-4923-8439-ecf9d7f5b542\",\"type\":\"default\",\"x\":345.99432373046875,\"y\":250.00000381469727,\"name\":\"1^Channel^Out0\",\"alignment\":\"right\",\"parentNode\":\"187b2909-5cbb-450a-88f2-5da0c01ac41c\",\"links\":[\"7152b2ba-a0ea-4b4c-9d99-4efd9169720e\"],\"in\":false,\"label\":\"1^Channel^Out0\"}],\"deviceType\":{\"icon\":\"IoIosDesktop\",\"name\":\"PC1\",\"cpu\":\"Pentium Dual-Core T4200 2GHz\",\"os\":\"Debian 8 64-bit\",\"libraries\":\"N/A\",\"schedulingAlgorithm\":\"fifo\"},\"channels\":[{\"name\":\"Channel\",\"buffer\":1024}],\"deviceId\":1},\"7985ef85-d1e0-49e1-9867-f54605655972\":{\"id\":\"7985ef85-d1e0-49e1-9867-f54605655972\",\"type\":\"ts-custom-node\",\"x\":647,\"y\":220.00000381469727,\"ports\":[{\"id\":\"9c7b3220-545c-4d8c-a9a7-4a968db5c74e\",\"locked\":true,\"type\":\"default\",\"x\":646.9885864257812,\"y\":275.00000381469727,\"name\":\"2^Channel^In0\",\"alignment\":\"left\",\"parentNode\":\"7985ef85-d1e0-49e1-9867-f54605655972\",\"links\":[\"7152b2ba-a0ea-4b4c-9d99-4efd9169720e\"],\"in\":true,\"label\":\"2^Channel^In0\"},{\"id\":\"7ed2d721-b209-43ae-8ca5-da0bfbbbdce9\",\"type\":\"default\",\"x\":786.9886474609375,\"y\":275.00000381469727,\"name\":\"2^Channel^Out0\",\"alignment\":\"right\",\"parentNode\":\"7985ef85-d1e0-49e1-9867-f54605655972\",\"links\":[],\"in\":false,\"label\":\"2^Channel^Out0\"}],\"deviceType\":{\"icon\":\"IoIosLaptop\",\"name\":\"Notebook\",\"cpu\":\"Pentium Dual-Core T4200 2GHz\",\"os\":\"Windows 10 Pro 64-bit\",\"libraries\":\"N/A\",\"schedulingAlgorithm\":\"fifo\"},\"channels\":[{\"name\":\"Channel\",\"buffer\":1024}],\"deviceId\":2}}}]}`;\r\nconst versions = `[{\"name\":\"Test\",\"processes\":[{\"name\":\"send_data\",\"time\":10,\"deviceId\":1,\"deviceToSendId\":2,\"outChannel\":\"Channel\",\"isInfinity\":false,\"outMessageSize\":1024}]}]`;\r\n\r\nconst Simulation1: SimulationTemplate = {\r\n  title: 'Simple connection',\r\n  description: 'Simple simulation to show mechanics of qopml web tool.',\r\n  deviceTypes,\r\n  mediums,\r\n  topology,\r\n  topologyDiagrams,\r\n  versions,\r\n};\r\n\r\nexport default Simulation1;\r\n","import { SimulationTemplate } from '../SimulationTemplate.model';\r\n\r\nconst deviceTypes = `[{\"icon\":\"IoIosDesktop\",\"name\":\"Client\",\"cpu\":\"Pentium Dual-Core T4200 2GHz\",\"os\":\"Windows 10 Pro 64-bit\",\"libraries\":\"N/A\",\"schedulingAlgorithm\":\"fifo\"},{\"icon\":\"IoIosCube\",\"name\":\"Server\",\"cpu\":\"12 x Intel Core i7-3930K 3.20GHz\",\"os\":\"Debian 7.1 64-bit\",\"libraries\":\"N/A\",\"schedulingAlgorithm\":\"rr\"}]`;\r\nconst mediums = `[{\"name\":\"Channel\",\"defaultQuality\":0.8,\"defaultListeningCurrent\":1,\"defaultSendingCurrent\":1,\"defaultReceivingCurrent\":1,\"channels\":[{\"name\":\"Channel\",\"buffer\":\"infinity\"}]}]`;\r\nconst topology = `[{\"deviceId\":1,\"deviceType\":{\"icon\":\"IoIosDesktop\",\"name\":\"Client\",\"cpu\":\"Pentium Dual-Core T4200 2GHz\",\"os\":\"Windows 10 Pro 64-bit\",\"libraries\":\"N/A\",\"schedulingAlgorithm\":\"fifo\"},\"connectedOutDevicesIds\":[{\"deviceId\":2,\"channelName\":\"Channel\"}]},{\"deviceId\":2,\"deviceType\":{\"icon\":\"IoIosCube\",\"name\":\"Server\",\"cpu\":\"12 x Intel Core i7-3930K 3.20GHz\",\"os\":\"Debian 7.1 64-bit\",\"libraries\":\"N/A\",\"schedulingAlgorithm\":\"rr\"},\"connectedOutDevicesIds\":[{\"deviceId\":3,\"channelName\":\"Channel\"}]},{\"deviceId\":3,\"deviceType\":{\"icon\":\"IoIosDesktop\",\"name\":\"Client\",\"cpu\":\"Pentium Dual-Core T4200 2GHz\",\"os\":\"Windows 10 Pro 64-bit\",\"libraries\":\"N/A\",\"schedulingAlgorithm\":\"fifo\"},\"connectedOutDevicesIds\":[]}]`;\r\nconst topologyDiagrams = `{\"id\":\"7e231183-9785-4589-bbc8-0238acd999a8\",\"offsetX\":0,\"offsetY\":0,\"zoom\":100,\"gridSize\":0,\"layers\":[{\"id\":\"3a73cacc-5e33-47ca-9d37-e7aaa8ad5e8f\",\"type\":\"diagram-links\",\"isSvg\":true,\"transformed\":true,\"models\":{\"d32b3e55-3833-4284-b6b2-1b13235041f7\":{\"id\":\"d32b3e55-3833-4284-b6b2-1b13235041f7\",\"type\":\"default\",\"selected\":false,\"source\":\"0466f63d-cc12-4150-b5ce-1f5ba316c6f3\",\"sourcePort\":\"0ce04e9a-be6e-4625-9790-ae3f10598308\",\"target\":\"6a6c77dc-d04a-4c98-82f3-7b05ea2ea119\",\"targetPort\":\"8c7c09f7-4580-4a3d-9d96-a46525d49eb4\",\"points\":[{\"id\":\"4f56dc9c-10ee-483f-b9bd-b589687578f4\",\"type\":\"point\",\"x\":259.991455078125,\"y\":180.99145793914795},{\"id\":\"42dc07e8-35e5-4fbe-9597-eaf65f5494f7\",\"type\":\"point\",\"x\":425.99713134765625,\"y\":319.9886198043823}],\"labels\":[],\"width\":3,\"color\":\"gray\",\"curvyness\":50,\"selectedColor\":\"rgb(0,192,255)\"},\"072448c0-5a70-4a5f-ba51-e48c1736c3b6\":{\"id\":\"072448c0-5a70-4a5f-ba51-e48c1736c3b6\",\"type\":\"default\",\"selected\":false,\"source\":\"6a6c77dc-d04a-4c98-82f3-7b05ea2ea119\",\"sourcePort\":\"1af24340-9f2d-49b6-926b-9134298ded76\",\"target\":\"c19889f1-afe5-4dd9-9ff5-59522567b35a\",\"targetPort\":\"dde85de9-b75d-4813-bd70-7cbef6ab2bac\",\"points\":[{\"id\":\"64b43d34-8fd1-481a-bc89-7f0529a1502b\",\"type\":\"point\",\"x\":565.9970703125,\"y\":319.9886198043823},{\"id\":\"73f9bb8f-9de5-4329-ba6f-b5e1e6821439\",\"type\":\"point\",\"x\":723.9943237304688,\"y\":440.98865032196045}],\"labels\":[],\"width\":3,\"color\":\"gray\",\"curvyness\":50,\"selectedColor\":\"rgb(0,192,255)\"}}},{\"id\":\"00d04583-a7e2-4165-9fe4-ab2348018b25\",\"type\":\"diagram-nodes\",\"isSvg\":false,\"transformed\":true,\"models\":{\"0466f63d-cc12-4150-b5ce-1f5ba316c6f3\":{\"id\":\"0466f63d-cc12-4150-b5ce-1f5ba316c6f3\",\"type\":\"ts-custom-node\",\"selected\":false,\"x\":100,\"y\":111.00000381469727,\"ports\":[{\"id\":\"a158f6f9-a913-4ca6-a54f-16bc3153ea21\",\"locked\":true,\"type\":\"default\",\"x\":99.991455078125,\"y\":165.99145889282227,\"name\":\"1^Channel^In0\",\"alignment\":\"left\",\"parentNode\":\"0466f63d-cc12-4150-b5ce-1f5ba316c6f3\",\"links\":[],\"in\":true,\"label\":\"1^Channel^In0\"},{\"id\":\"0ce04e9a-be6e-4625-9790-ae3f10598308\",\"type\":\"default\",\"x\":239.991455078125,\"y\":165.99145889282227,\"name\":\"1^Channel^Out0\",\"alignment\":\"right\",\"parentNode\":\"0466f63d-cc12-4150-b5ce-1f5ba316c6f3\",\"links\":[\"d32b3e55-3833-4284-b6b2-1b13235041f7\"],\"in\":false,\"label\":\"1^Channel^Out0\"}],\"deviceType\":{\"icon\":\"IoIosDesktop\",\"name\":\"Client\",\"cpu\":\"Pentium Dual-Core T4200 2GHz\",\"os\":\"Windows 10 Pro 64-bit\",\"libraries\":\"N/A\",\"schedulingAlgorithm\":\"fifo\"},\"channels\":[{\"name\":\"Channel\",\"buffer\":\"infinity\"}],\"deviceId\":1},\"6a6c77dc-d04a-4c98-82f3-7b05ea2ea119\":{\"id\":\"6a6c77dc-d04a-4c98-82f3-7b05ea2ea119\",\"type\":\"ts-custom-node\",\"selected\":false,\"x\":406,\"y\":250.00000381469727,\"ports\":[{\"id\":\"8c7c09f7-4580-4a3d-9d96-a46525d49eb4\",\"locked\":true,\"type\":\"default\",\"x\":405.99713134765625,\"y\":304.98862075805664,\"name\":\"2^Channel^In0\",\"alignment\":\"left\",\"parentNode\":\"6a6c77dc-d04a-4c98-82f3-7b05ea2ea119\",\"links\":[\"d32b3e55-3833-4284-b6b2-1b13235041f7\"],\"in\":true,\"label\":\"2^Channel^In0\"},{\"id\":\"1af24340-9f2d-49b6-926b-9134298ded76\",\"type\":\"default\",\"x\":545.9970703125,\"y\":304.98862075805664,\"name\":\"2^Channel^Out0\",\"alignment\":\"right\",\"parentNode\":\"6a6c77dc-d04a-4c98-82f3-7b05ea2ea119\",\"links\":[\"072448c0-5a70-4a5f-ba51-e48c1736c3b6\"],\"in\":false,\"label\":\"2^Channel^Out0\"}],\"deviceType\":{\"icon\":\"IoIosCube\",\"name\":\"Server\",\"cpu\":\"12 x Intel Core i7-3930K 3.20GHz\",\"os\":\"Debian 7.1 64-bit\",\"libraries\":\"N/A\",\"schedulingAlgorithm\":\"rr\"},\"channels\":[{\"name\":\"Channel\",\"buffer\":\"infinity\"}],\"deviceId\":2},\"c19889f1-afe5-4dd9-9ff5-59522567b35a\":{\"id\":\"c19889f1-afe5-4dd9-9ff5-59522567b35a\",\"type\":\"ts-custom-node\",\"selected\":false,\"x\":704,\"y\":371.00000381469727,\"ports\":[{\"id\":\"dde85de9-b75d-4813-bd70-7cbef6ab2bac\",\"locked\":true,\"type\":\"default\",\"x\":703.9943237304688,\"y\":425.98865127563477,\"name\":\"3^Channel^In0\",\"alignment\":\"left\",\"parentNode\":\"c19889f1-afe5-4dd9-9ff5-59522567b35a\",\"links\":[\"072448c0-5a70-4a5f-ba51-e48c1736c3b6\"],\"in\":true,\"label\":\"3^Channel^In0\"},{\"id\":\"acbc0e37-fca6-45b6-aeac-9135edef8c4f\",\"type\":\"default\",\"x\":843.9942626953125,\"y\":425.98865127563477,\"name\":\"3^Channel^Out0\",\"alignment\":\"right\",\"parentNode\":\"c19889f1-afe5-4dd9-9ff5-59522567b35a\",\"links\":[],\"in\":false,\"label\":\"3^Channel^Out0\"}],\"deviceType\":{\"icon\":\"IoIosDesktop\",\"name\":\"Client\",\"cpu\":\"Pentium Dual-Core T4200 2GHz\",\"os\":\"Windows 10 Pro 64-bit\",\"libraries\":\"N/A\",\"schedulingAlgorithm\":\"fifo\"},\"channels\":[{\"name\":\"Channel\",\"buffer\":\"infinity\"}],\"deviceId\":3}}}]}`;\r\nconst versions = `[{\"name\":\"Version1\",\"processes\":[{\"name\":\"send_data_to_server\",\"time\":5,\"deviceId\":1,\"deviceToSendId\":2,\"outChannel\":\"Channel\",\"isInfinity\":false,\"outMessageSize\":2048},{\"name\":\"recieve_data_from_client\",\"time\":1,\"deviceId\":2,\"inChannel\":\"Channel\",\"isInfinity\":false,\"outMessageSize\":1},{\"name\":\"send_data_to_client\",\"time\":1,\"deviceId\":2,\"deviceToSendId\":3,\"outChannel\":\"Channel\",\"isInfinity\":false,\"outMessageSize\":2048},{\"name\":\"recieve_data_from_server\",\"time\":1,\"deviceId\":3,\"inChannel\":\"Channel\",\"isInfinity\":false,\"outMessageSize\":1}]}]`;\r\n\r\nconst Simulation2: SimulationTemplate = {\r\n  title: 'Proxy server',\r\n  description:\r\n    'The simulation shows sending and recieving data between devices.',\r\n  deviceTypes,\r\n  mediums,\r\n  topology,\r\n  topologyDiagrams,\r\n  versions,\r\n};\r\n\r\nexport default Simulation2;\r\n","import { SimulationTemplate } from '../SimulationTemplate.model';\r\n\r\nconst deviceTypes = `[{\"icon\":\"IoIosDesktop\",\"name\":\"Device\",\"cpu\":\"16-bit 8MHz TI MSP430\",\"os\":\"Debian 8 64-bit\",\"libraries\":\"openssl 1.0.1c\",\"schedulingAlgorithm\":\"fifo\"}]`;\r\nconst mediums = `[{\"name\":\"Medium\",\"defaultQuality\":0.9,\"defaultListeningCurrent\":1,\"defaultSendingCurrent\":1,\"defaultReceivingCurrent\":1,\"channels\":[{\"name\":\"Channel\",\"buffer\":1024}]}]`;\r\nconst topology = `[{\"deviceId\":1,\"deviceType\":{\"icon\":\"IoIosDesktop\",\"name\":\"Device\",\"cpu\":\"16-bit 8MHz TI MSP430\",\"os\":\"Debian 8 64-bit\",\"libraries\":\"openssl 1.0.1c\",\"schedulingAlgorithm\":\"fifo\"},\"connectedOutDevicesIds\":[{\"deviceId\":2,\"channelName\":\"Channel\"}]},{\"deviceId\":2,\"deviceType\":{\"icon\":\"IoIosDesktop\",\"name\":\"Device\",\"cpu\":\"16-bit 8MHz TI MSP430\",\"os\":\"Debian 8 64-bit\",\"libraries\":\"openssl 1.0.1c\",\"schedulingAlgorithm\":\"fifo\"},\"connectedOutDevicesIds\":[]}]`;\r\nconst topologyDiagrams = `{\"id\":\"e250b3c2-3b02-4860-aa21-7e9e48eee011\",\"offsetX\":0,\"offsetY\":0,\"zoom\":100,\"gridSize\":0,\"layers\":[{\"id\":\"d9530a0b-44b1-47ea-9838-fda7a01797c0\",\"type\":\"diagram-links\",\"isSvg\":true,\"transformed\":true,\"models\":{\"7d162d1c-0237-43cb-bf22-572adcbd93bd\":{\"id\":\"7d162d1c-0237-43cb-bf22-572adcbd93bd\",\"type\":\"default\",\"selected\":false,\"source\":\"63d49090-d9ae-4aeb-ba47-2ea586732f6f\",\"sourcePort\":\"3ac12156-6af2-4765-86a8-1748248097db\",\"target\":\"02dff480-a3cc-4304-b2a4-c14de3a3a60a\",\"targetPort\":\"2f428a51-bb25-40f8-a6ab-d417e0e834df\",\"points\":[{\"id\":\"39fafc7f-149f-4b84-bef2-4a2b053ed06a\",\"type\":\"point\",\"x\":378.99432373046875,\"y\":268.00000286102295},{\"id\":\"beb83ee1-512b-4fbe-a1fc-0f43989ce6ae\",\"type\":\"point\",\"x\":657.9971313476562,\"y\":272.9971647262573}],\"labels\":[],\"width\":3,\"color\":\"gray\",\"curvyness\":50,\"selectedColor\":\"rgb(0,192,255)\"}}},{\"id\":\"07bb95c9-d3c7-4018-922f-6f2d749aafa1\",\"type\":\"diagram-nodes\",\"isSvg\":false,\"transformed\":true,\"models\":{\"63d49090-d9ae-4aeb-ba47-2ea586732f6f\":{\"id\":\"63d49090-d9ae-4aeb-ba47-2ea586732f6f\",\"type\":\"ts-custom-node\",\"selected\":true,\"x\":219,\"y\":198.00000381469727,\"ports\":[{\"id\":\"97ce6e01-874c-4447-8ab3-8d5abf556b5b\",\"locked\":true,\"type\":\"default\",\"x\":218.99429321289062,\"y\":253.00000381469727,\"name\":\"1^Channel^In0\",\"alignment\":\"left\",\"parentNode\":\"63d49090-d9ae-4aeb-ba47-2ea586732f6f\",\"links\":[],\"in\":true,\"label\":\"1^Channel^In0\"},{\"id\":\"3ac12156-6af2-4765-86a8-1748248097db\",\"type\":\"default\",\"x\":358.99432373046875,\"y\":253.00000381469727,\"name\":\"1^Channel^Out0\",\"alignment\":\"right\",\"parentNode\":\"63d49090-d9ae-4aeb-ba47-2ea586732f6f\",\"links\":[\"7d162d1c-0237-43cb-bf22-572adcbd93bd\"],\"in\":false,\"label\":\"1^Channel^Out0\"}],\"deviceType\":{\"icon\":\"IoIosDesktop\",\"name\":\"Device\",\"cpu\":\"16-bit 8MHz TI MSP430\",\"os\":\"Debian 8 64-bit\",\"libraries\":\"openssl 1.0.1c\",\"schedulingAlgorithm\":\"fifo\"},\"channels\":[{\"name\":\"Channel\",\"buffer\":1024}],\"deviceId\":1},\"02dff480-a3cc-4304-b2a4-c14de3a3a60a\":{\"id\":\"02dff480-a3cc-4304-b2a4-c14de3a3a60a\",\"type\":\"ts-custom-node\",\"x\":638,\"y\":203.00000381469727,\"ports\":[{\"id\":\"2f428a51-bb25-40f8-a6ab-d417e0e834df\",\"locked\":true,\"type\":\"default\",\"x\":637.9971313476562,\"y\":257.99716567993164,\"name\":\"2^Channel^In0\",\"alignment\":\"left\",\"parentNode\":\"02dff480-a3cc-4304-b2a4-c14de3a3a60a\",\"links\":[\"7d162d1c-0237-43cb-bf22-572adcbd93bd\"],\"in\":true,\"label\":\"2^Channel^In0\"},{\"id\":\"66e4ab87-c1a4-403b-a831-786d4f96ceb4\",\"type\":\"default\",\"x\":777.9970703125,\"y\":257.99716567993164,\"name\":\"2^Channel^Out0\",\"alignment\":\"right\",\"parentNode\":\"02dff480-a3cc-4304-b2a4-c14de3a3a60a\",\"links\":[],\"in\":false,\"label\":\"2^Channel^Out0\"}],\"deviceType\":{\"icon\":\"IoIosDesktop\",\"name\":\"Device\",\"cpu\":\"16-bit 8MHz TI MSP430\",\"os\":\"Debian 8 64-bit\",\"libraries\":\"openssl 1.0.1c\",\"schedulingAlgorithm\":\"fifo\"},\"channels\":[{\"name\":\"Channel\",\"buffer\":1024}],\"deviceId\":2}}}]}`;\r\nconst versions = `[{\"name\":\"Version\",\"processes\":[{\"name\":\"encrypt_data\",\"time\":5,\"deviceId\":1,\"isInfinity\":false,\"outMessageSize\":1},{\"name\":\"send_data\",\"time\":1,\"deviceId\":1,\"deviceToSendId\":2,\"outChannel\":\"Channel\",\"isInfinity\":false,\"outMessageSize\":1024},{\"name\":\"recieve_data\",\"time\":1,\"deviceId\":2,\"inChannel\":\"Channel\",\"isInfinity\":false,\"outMessageSize\":1},{\"name\":\"decrypt_data\",\"time\":5,\"deviceId\":2,\"isInfinity\":false,\"outMessageSize\":1}]}]`;\r\n\r\nconst Simulation3: SimulationTemplate = {\r\n  title: 'Encryption',\r\n  description: 'The simulation shows simple encryption processes.',\r\n  deviceTypes,\r\n  mediums,\r\n  topology,\r\n  topologyDiagrams,\r\n  versions,\r\n};\r\n\r\nexport default Simulation3;\r\n","import React from 'react';\r\n//styles\r\nimport './SimulationTemplateModal.css';\r\nimport {\r\n  SimulationTemplate,\r\n  SimulationTemplatesList,\r\n} from '../../models/SimulationTemplate.model';\r\nimport { IoIosAdd } from 'react-icons/io';\r\n\r\ninterface IProps {\r\n  emptySimulationPressed: () => void;\r\n  templateSimulationPressed: (simulation: SimulationTemplate) => void;\r\n}\r\n\r\nconst SimulationTemplateModal = (props: IProps) => {\r\n  return (\r\n    <div className=\"template-modal-container\">\r\n      <div className=\"template-modal-content\">\r\n        <div className=\"template-modal-content-header\">\r\n          <h2>New simulation</h2>\r\n        </div>\r\n        <div className=\"template-modal-content-inside\">\r\n          <div className=\"template-modal-content-column\">\r\n            <div\r\n              className=\"template-modal-add-empty-button\"\r\n              onClick={props.emptySimulationPressed}\r\n            >\r\n              <div className=\"template-modal-add-empty-button-icon\">\r\n                <IoIosAdd />\r\n              </div>\r\n              <label>New empty simulation</label>\r\n            </div>\r\n          </div>\r\n          <div className=\"template-modal-separator\" />\r\n          <div className=\"template-modal-content-column\">\r\n            <label>or use available templates:</label>\r\n            {SimulationTemplatesList.map((item, index) => (\r\n              <div\r\n                key={'template' + index}\r\n                className=\"template-modal-template-item\"\r\n                onClick={() => props.templateSimulationPressed(item)}\r\n              >\r\n                <h5>{item.title}</h5>\r\n                <p>{item.description}</p>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SimulationTemplateModal;\r\n","import React from 'react';\r\n//styles\r\nimport './Simulation.css';\r\n//mobx\r\nimport { inject, observer } from 'mobx-react';\r\nimport RootStore from '../../stores/RootStore';\r\nimport { withRouter } from 'react-router-dom';\r\n//components\r\nimport SimulationBottomBar from '../../components/SimulationBottomBar';\r\nimport DevicesTypes from './DevicesTypes';\r\nimport MediumChannels from './MediumChannels';\r\nimport Topology from './Topology';\r\nimport Versions from './Versions';\r\nimport Start from './Start';\r\nimport Modal from '../../components/modal/Modal';\r\nimport TranslationService from '../../services/TranslationService';\r\nimport { SimulationTemplate } from '../../models/SimulationTemplate.model';\r\nimport Simulation1 from '../../models/templates/Simulation1';\r\nimport SimulationTemplateModal from '../../components/simulation-template-modal/SimulationTemplateModal';\r\n\r\ninterface IProps {\r\n  store?: RootStore;\r\n  navigation?: any;\r\n  history: any;\r\n  location: any;\r\n  match: any;\r\n}\r\n\r\ninterface IState {\r\n  mainPosition: number;\r\n  showTemplateModal: boolean;\r\n  loading: boolean;\r\n  showModal: boolean;\r\n  modalContent: {\r\n    header: string;\r\n    text: string;\r\n    leftButtonLabel: string;\r\n    rightButtonLabel?: string;\r\n    onLeftClick: () => void;\r\n    onRightClick?: () => void;\r\n  };\r\n  defaultSimulation?: SimulationTemplate;\r\n}\r\n\r\n@inject('store')\r\n@observer\r\nclass SimulationPage extends React.Component<IProps, IState> {\r\n  deviceTypesRef = React.createRef<DevicesTypes>();\r\n  mediumsChannelsRef = React.createRef<MediumChannels>();\r\n  topologyRef = React.createRef<Topology>();\r\n  versionsRef = React.createRef<Versions>();\r\n\r\n  state: IState = {\r\n    mainPosition: -1,\r\n    showTemplateModal: true,\r\n    loading: true,\r\n    showModal: false,\r\n    modalContent: {\r\n      header: '',\r\n      text: '',\r\n      leftButtonLabel: '',\r\n      rightButtonLabel: undefined,\r\n      onLeftClick: () => {},\r\n      onRightClick: undefined,\r\n    },\r\n  };\r\n\r\n  componentDidMount = () => {\r\n    this.props.store?.resetNewSimulationStore();\r\n    setTimeout(() => {\r\n      this.setState({ loading: false });\r\n    }, 100);\r\n  };\r\n\r\n  closeTemplateModal = () => {\r\n    this.setState({ showTemplateModal: false, mainPosition: 0 });\r\n  };\r\n\r\n  setSimulation = (simulation: SimulationTemplate) => {\r\n    this.setState({ defaultSimulation: simulation });\r\n    this.props.store?.setSimulationModel(simulation);\r\n    this.closeTemplateModal();\r\n  };\r\n\r\n  elements: {\r\n    [key in string]: {\r\n      checkFormValidation?: () => boolean;\r\n      isArrayEmpty?: () => boolean;\r\n      previousCallback?: () => void;\r\n      nextCallback?: () => void;\r\n    };\r\n  } = {\r\n    '0': {\r\n      checkFormValidation: () => this.deviceTypesRef.current?.saveData()!,\r\n      isArrayEmpty: () =>\r\n        this.props.store?.newSimulationStore.deviceTypes.length === 0,\r\n      previousCallback: () =>\r\n        this.props.store?.newSimulationStore.resetDeviceTypes,\r\n      nextCallback: () =>\r\n        this.props.store?.newSimulationStore.changeActiveDeviceType(undefined),\r\n    },\r\n    '1': {\r\n      checkFormValidation: () => this.mediumsChannelsRef.current?.saveData()!,\r\n      isArrayEmpty: () =>\r\n        this.props.store?.newSimulationStore.mediums.length === 0,\r\n      previousCallback: () => this.props.store?.newSimulationStore.resetMediums,\r\n      nextCallback: () => {\r\n        this.props.store?.newSimulationStore.resetTopology();\r\n        this.props.store?.newSimulationStore.changeActiveMedium(undefined);\r\n        this.topologyRef.current?.resetApp();\r\n      },\r\n    },\r\n    '2': {\r\n      checkFormValidation: () => true,\r\n      isArrayEmpty: () =>\r\n        this.props.store?.newSimulationStore.topologyElements.length === 0,\r\n      previousCallback: () => {\r\n        this.props.store?.newSimulationStore.resetTopology();\r\n        this.topologyRef.current?.resetApp();\r\n      },\r\n      nextCallback: () => {\r\n        this.topologyRef.current?.serialize();\r\n      },\r\n    },\r\n    '3': {\r\n      checkFormValidation: () => this.versionsRef.current?.saveData()!,\r\n      isArrayEmpty: () =>\r\n        this.props.store?.newSimulationStore.versions.length === 0,\r\n      previousCallback: () =>\r\n        this.props.store?.newSimulationStore.resetVersions,\r\n      nextCallback: () => {},\r\n      // nextCallback: () =>\r\n      //   this.props.store?.newSimulationStore.changeActiveVersion(undefined),\r\n    },\r\n    '4': {},\r\n  };\r\n\r\n  changePosition = (num: number) => {\r\n    const element = this.elements[this.state.mainPosition.toString()];\r\n\r\n    if (num < this.state.mainPosition) {\r\n      this.setState({\r\n        showModal: true,\r\n        modalContent: {\r\n          header: TranslationService.confirm,\r\n          text: TranslationService.go_back_are_you_shure,\r\n          leftButtonLabel: TranslationService.cancel,\r\n          rightButtonLabel: TranslationService.accept,\r\n          onLeftClick: () => this.setState({ showModal: false }),\r\n          onRightClick: () => {\r\n            element.previousCallback && element.previousCallback();\r\n            this.setState({ mainPosition: num, showModal: false });\r\n          },\r\n        },\r\n      });\r\n    } else {\r\n      if (element.checkFormValidation && !element.checkFormValidation()) {\r\n        this.setState({\r\n          showModal: true,\r\n          modalContent: {\r\n            header: TranslationService.warning,\r\n            text: TranslationService.problems_in_form,\r\n            leftButtonLabel: TranslationService.ok,\r\n            onLeftClick: () => this.setState({ showModal: false }),\r\n          },\r\n        });\r\n        return;\r\n      }\r\n\r\n      element.nextCallback && element.nextCallback();\r\n\r\n      if (element.isArrayEmpty && element.isArrayEmpty()) {\r\n        this.setState({\r\n          showModal: true,\r\n          modalContent: {\r\n            header: TranslationService.warning,\r\n            text: TranslationService.add_element_in_page,\r\n            leftButtonLabel: TranslationService.ok,\r\n            onLeftClick: () => this.setState({ showModal: false }),\r\n          },\r\n        });\r\n        return;\r\n      }\r\n\r\n      this.setState({ mainPosition: num });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      mainPosition,\r\n      loading,\r\n      modalContent,\r\n      showModal,\r\n      showTemplateModal,\r\n    } = this.state;\r\n\r\n    if (loading) {\r\n      return null;\r\n    }\r\n\r\n    return (\r\n      <div className=\"simulation-padding-container\">\r\n        {mainPosition === 0 && <DevicesTypes ref={this.deviceTypesRef} />}\r\n\r\n        {mainPosition === 1 && <MediumChannels ref={this.mediumsChannelsRef} />}\r\n\r\n        {mainPosition === 2 && (\r\n          <Topology\r\n            ref={this.topologyRef}\r\n            defaultModel={this.state.defaultSimulation}\r\n          />\r\n        )}\r\n\r\n        {mainPosition === 3 && <Versions ref={this.versionsRef} />}\r\n\r\n        {mainPosition === 4 && <Start />}\r\n\r\n        <SimulationBottomBar\r\n          position={mainPosition}\r\n          changePosition={this.changePosition}\r\n        />\r\n\r\n        {showModal && (\r\n          <Modal\r\n            text={modalContent.text}\r\n            header={modalContent.header}\r\n            leftButtonLabel={modalContent.leftButtonLabel}\r\n            rightButtonLabel={modalContent.rightButtonLabel}\r\n            onPressLeft={modalContent.onLeftClick}\r\n            onPressRight={modalContent.onRightClick}\r\n          />\r\n        )}\r\n\r\n        {showTemplateModal && (\r\n          <SimulationTemplateModal\r\n            emptySimulationPressed={this.closeTemplateModal}\r\n            templateSimulationPressed={(item) => this.setSimulation(item)}\r\n          />\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(SimulationPage);\r\n","import React from 'react';\r\nimport './SimulationDetails.css';\r\nimport { inject, observer } from 'mobx-react';\r\nimport RootStore from '../../stores/RootStore';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { SimulationListElement as SimulationListElementModel } from '../../models/SimulationListElement.model';\r\nimport moment from 'moment';\r\nimport { classNames } from '../../utils/ClassNames';\r\nimport TranslationService from '../../services/TranslationService';\r\nimport { map, trim } from 'lodash';\r\n\r\ninterface IProps {\r\n  store?: RootStore;\r\n  navigation?: any;\r\n  history: any;\r\n  location: any;\r\n  match: any;\r\n}\r\n\r\ninterface IState {\r\n  simulation?: SimulationListElementModel;\r\n  loading: boolean;\r\n}\r\n\r\nconst StatusDictionary: { [key in string]: string } = {\r\n  '1': 'Running',\r\n  '2': 'Passed',\r\n  '3': 'Error',\r\n};\r\n\r\n@inject('store')\r\n@observer\r\nclass SimulationDetails extends React.Component<IProps, IState> {\r\n  state: IState = {\r\n    simulation: undefined,\r\n    loading: true,\r\n  };\r\n\r\n  componentDidMount = () => {\r\n    this.getSimulation();\r\n  };\r\n\r\n  getSimulation = async () => {\r\n    try {\r\n      const link = '/api/simulations/' + this.props.match.params.id;\r\n      const rawResponse = await fetch(link, {\r\n        method: 'GET',\r\n        headers: {\r\n          Accept: 'application/json',\r\n          'Content-Type': 'application/json',\r\n          Authorization: 'Bearer ' + localStorage.getItem('token'),\r\n        },\r\n      });\r\n\r\n      if (rawResponse.status === 401) {\r\n        this.props.store?.userStore.logout();\r\n        setTimeout(() => {\r\n          window.location.reload();\r\n        }, 100);\r\n        return;\r\n      }\r\n\r\n      const content = await rawResponse.json();\r\n\r\n      if (content.success) {\r\n        this.setState({ simulation: content.data, loading: false });\r\n      }\r\n    } catch (error) {\r\n      // console.log(error);\r\n      this.setState({ loading: false });\r\n    }\r\n  };\r\n\r\n  renderRaport = () => {\r\n    const simulation = this.state.simulation!;\r\n\r\n    if (simulation.status === '2') {\r\n      let data = simulation\r\n        .results!.split(\r\n          '--------------------------------------------------------------------------------'\r\n        )\r\n        .map((w) => {\r\n          return w\r\n            .split('\\n')\r\n            .map((v) => v.trim())\r\n            .filter((v) => v.length !== 0);\r\n        })\r\n        .filter((v) => v.length !== 0);\r\n\r\n      return (\r\n        <>\r\n          {data?.map((v) => {\r\n            const header = v[1].split('\\t');\r\n            const results = v.slice(2, v.length - 2).map((v) => v.split('\\t'));\r\n            const rest = v.slice(v.length - 2).join('\\n\\n');\r\n\r\n            return (\r\n              <div className=\"passed-result-container\">\r\n                <div className=\"passed-header\">{header[1]}</div>\r\n                <div className=\"passed-result\">\r\n                  <div className=\"passed-result-column passed-result-column-bold\">\r\n                    {TranslationService.device}\r\n                  </div>\r\n                  <div className=\"passed-result-column passed-result-column-bold\">\r\n                    {TranslationService.time_in_s}\r\n                  </div>\r\n                  <div className=\"passed-result-column passed-result-column-bold\">\r\n                    {TranslationService.status}\r\n                  </div>\r\n                </div>\r\n\r\n                {results.map((w) => (\r\n                  <div className=\"passed-result\">\r\n                    <div className=\"passed-result-column\">{w[0]}</div>\r\n                    <div className=\"passed-result-column\">{w[1]}</div>\r\n                    <div\r\n                      className={\r\n                        'passed-result-column ' +\r\n                        (w[2] === 'Finished'\r\n                          ? 'status-text-passed'\r\n                          : 'status-text-error')\r\n                      }\r\n                    >\r\n                      {w[2]}\r\n                    </div>\r\n                  </div>\r\n                ))}\r\n                <div className=\"results-messages\">{rest}</div>\r\n              </div>\r\n            );\r\n          })}\r\n        </>\r\n      );\r\n    } else {\r\n      return (\r\n        <div className=\"details-error-container\">{simulation.results}</div>\r\n      );\r\n    }\r\n  };\r\n\r\n  goToSimulationsList = () => {\r\n    this.props.history.push('/simulations');\r\n  };\r\n\r\n  render() {\r\n    const { simulation, loading } = this.state;\r\n\r\n    const classes = classNames({\r\n      'status-text-error': simulation?.status === '3',\r\n      'status-text-passed': simulation?.status === '2',\r\n    });\r\n\r\n    return (\r\n      <div className=\"main-default-container\">\r\n        <div className=\"header-container\">\r\n          <div>\r\n            <h2>\r\n              <p onClick={this.goToSimulationsList} className=\"back-text\">\r\n                {TranslationService.go_back}\r\n              </p>\r\n              {TranslationService.simulation_details}\r\n            </h2>\r\n          </div>\r\n        </div>\r\n\r\n        {!loading && (\r\n          <div className=\"section simulation-details\">\r\n            {simulation ? (\r\n              <>\r\n                <div className=\"details-container\">\r\n                  <h5>{TranslationService.date}</h5>\r\n                  <p>\r\n                    {moment(simulation.createdAt).format('YYYY-MM-DD HH:mm:ss')}\r\n                  </p>\r\n                  <h5>{TranslationService.status}</h5>\r\n                  <p className={classes}>\r\n                    {StatusDictionary[simulation.status]}\r\n                  </p>\r\n                </div>\r\n                <h5>{TranslationService.details}</h5>\r\n                {this.renderRaport()}\r\n              </>\r\n            ) : (\r\n              <div className=\"big-loader-container\">\r\n                <p>{TranslationService.simulation_not_found}</p>\r\n              </div>\r\n            )}\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(SimulationDetails);\r\n","import React from 'react';\nimport './App.css';\n//navigation\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from 'react-router-dom';\n//mobx\nimport { Provider } from 'mobx-react';\nimport Store from './stores/RootStore';\n//components\nimport Navbar from './components/Navbar';\nimport Footer from './components/Footer';\n//pages\nimport LoginPage from './pages/login/Login';\nimport RegisterPage from './pages/register/Register';\nimport SimulationsList from './pages/simulationslist/SimulationsList';\nimport ChangePassword from './pages/change_password/ChangePassword';\nimport Simulation from './pages/simulation/SimulationMain';\nimport SimulationDetails from './pages/simulation-details/SimulationDetails';\n\nlet store = new Store();\n\nconst PrivateRoute = ({\n  component,\n  ...rest\n}: {\n  component: any;\n  path: string;\n}) => {\n  const Component = component;\n  return (\n    <Route\n      {...rest}\n      render={(props) =>\n        localStorage.getItem('token') !== null &&\n        localStorage.getItem('token') !== '' ? (\n          <Component {...props} />\n        ) : (\n          <Redirect to=\"/login\" />\n        )\n      }\n    />\n  );\n};\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n        <Router>\n          <Navbar />\n          <Switch>\n            <PrivateRoute path=\"/simulations\" component={SimulationsList} />\n            <PrivateRoute path=\"/details/:id\" component={SimulationDetails} />\n            <PrivateRoute path=\"/change_password\" component={ChangePassword} />\n            <PrivateRoute path=\"/simulation\" component={Simulation} />\n            <Route path=\"/register\" component={RegisterPage} />\n            <Route path=\"/login\" component={LoginPage} />\n            <PrivateRoute path=\"/\" component={SimulationsList} />\n          </Switch>\n          <Footer />\n        </Router>\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}